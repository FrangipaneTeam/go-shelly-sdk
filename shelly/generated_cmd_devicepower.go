// code generated by go generate - look at command.go.tmpl for source file
package shelly

/*
 > Command DevicePower.GetStatus
 > Get DevicePower status
*/

// DevicePowerGetStatusRequest is the request of GetStatus.
type DevicePowerGetStatusRequest struct {
	Id string `json:"id"` // Id of the DevicePower component instance
}

// DevicePowerGetStatusResponse is the response of GetStatus.
type DevicePowerGetStatusResponse struct {
	Battery  DevicePowerGetStatusResponseBattery  `json:"battery"`  // Information about the battery charge
	Errors   []string                             `json:"errors"`   // Whether external power source is connected
	External DevicePowerGetStatusResponseExternal `json:"external"` // Information about the external power source (only available if external power source is supported)
	Id       int                                  `json:"id"`       // Id of the DevicePower component instance
}

// DevicePowerGetStatusResponseBattery is the response of battery.
type DevicePowerGetStatusResponseBattery struct {
	Percent int `json:"percent"` // Battery charge level in % (null if valid value could not be obtained)
	V       int `json:"v"`       // Battery voltage in Volts (null if valid value could not be obtained)
}

// DevicePowerGetStatusResponseExternal is the response of external.
type DevicePowerGetStatusResponseExternal struct {
	Present bool `json:"present"` // Whether external power source is connected
}

// readResponse reads the response into the given interface.
func (r *DevicePowerGetStatusResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// GetStatus Get DevicePower status
func (c DevicePowerClient) GetStatus(args DevicePowerGetStatusRequest) (resp *DevicePowerGetStatusResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("DevicePower.GetStatus", args, &reader.Response); err != nil {
		return
	}

	resp = &DevicePowerGetStatusResponse{}
	return resp, resp.readResponse(reader)
}

// Getbattery returns the battery value.
func (r *DevicePowerGetStatusResponse) GetBattery() DevicePowerGetStatusResponseBattery {
	return r.Battery
}

// Geterrors returns the errors value.
func (r *DevicePowerGetStatusResponse) GetErrors() []string {
	return r.Errors
}

// Getexternal returns the external value.
func (r *DevicePowerGetStatusResponse) GetExternal() DevicePowerGetStatusResponseExternal {
	return r.External
}

// Getid returns the id value.
func (r *DevicePowerGetStatusResponse) GetId() int {
	return r.Id
}

// Getpercent returns the percent value.
func (r *DevicePowerGetStatusResponseBattery) GetPercent() int {
	return r.Percent
}

// Getv returns the v value.
func (r *DevicePowerGetStatusResponseBattery) GetV() int {
	return r.V
}

// Getpresent returns the present value.
func (r *DevicePowerGetStatusResponseExternal) GetPresent() bool {
	return r.Present
}
