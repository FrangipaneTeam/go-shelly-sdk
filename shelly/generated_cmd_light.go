// code generated by go generate - look at command.go.tmpl for source file
package shelly

/*
 > Command Light.GetConfig
 >
*/

// LightGetConfigRequest is the request of GetConfig.
type LightGetConfigRequest struct {
	Id string `json:"id"` // Id of the Light component instance.
}

// LightGetConfigResponse is the response of GetConfig.
type LightGetConfigResponse struct {
	AutoOff                bool     `json:"auto_off"`                     // True if the "Automatic OFF" function is enabled, false otherwise
	AutoOffDelay           int      `json:"auto_off_delay"`               // Seconds to pass until the component is switched back off
	AutoOn                 bool     `json:"auto_on"`                      // True if the "Automatic ON" function is enabled, false otherwise
	AutoOnDelay            int      `json:"auto_on_delay"`                // Seconds to pass until the component is switched back on
	DefaultBrightness      int      `json:"default.brightness,omitempty"` // Brightness level (in percent) after power on
	Id                     string   `json:"id"`                           // Id of the Light component instance.
	InitialState           string   `json:"initial_state"`                // Output state to set on power_on. Range of values: off, on, restore_last
	Name                   string   `json:"name,omitempty"`               // Name of the light instance.
	NightModeActiveBetween []string `json:"night_mode.active_between"`    // Containing 2 elements of type string, the first element indicates the start of the period during which the night mode will be active, the second indicates the end of that period. Both start and end are strings in the format HH:MM, where HH and MM are hours and minutes with optinal leading zeros.
	NightModeBrightness    int      `json:"night_mode.brightness"`        // Brightness level limit when night mode is active
	NightModeEnable        bool     `json:"night_mode.enable"`            // Enable or disable night mode
}

// readResponse reads the response into the given interface.
func (r *LightGetConfigResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// GetConfig
func (c LightClient) GetConfig(args LightGetConfigRequest) (resp *LightGetConfigResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Light.GetConfig", args, &reader.Response); err != nil {
		return
	}

	resp = &LightGetConfigResponse{}
	return resp, resp.readResponse(reader)
}

// Getauto_off returns the auto_off value.
func (r *LightGetConfigResponse) GetAutoOff() bool {
	return r.AutoOff
}

// Getauto_off_delay returns the auto_off_delay value.
func (r *LightGetConfigResponse) GetAutoOffDelay() int {
	return r.AutoOffDelay
}

// Getauto_on returns the auto_on value.
func (r *LightGetConfigResponse) GetAutoOn() bool {
	return r.AutoOn
}

// Getauto_on_delay returns the auto_on_delay value.
func (r *LightGetConfigResponse) GetAutoOnDelay() int {
	return r.AutoOnDelay
}

// Getdefault.brightness returns the default.brightness value.
func (r *LightGetConfigResponse) GetDefaultBrightness() int {
	return r.DefaultBrightness
}

// Getid returns the id value.
func (r *LightGetConfigResponse) GetId() string {
	return r.Id
}

// Getinitial_state returns the initial_state value.
func (r *LightGetConfigResponse) GetInitialState() string {
	return r.InitialState
}

// Getname returns the name value.
func (r *LightGetConfigResponse) GetName() string {
	return r.Name
}

// Getnight_mode.active_between returns the night_mode.active_between value.
func (r *LightGetConfigResponse) GetNightModeActiveBetween() []string {
	return r.NightModeActiveBetween
}

// Getnight_mode.brightness returns the night_mode.brightness value.
func (r *LightGetConfigResponse) GetNightModeBrightness() int {
	return r.NightModeBrightness
}

// Getnight_mode.enable returns the night_mode.enable value.
func (r *LightGetConfigResponse) GetNightModeEnable() bool {
	return r.NightModeEnable
}

/*
 > Command Light.GetStatus
 >
*/

// LightGetStatusRequest is the request of GetStatus.
type LightGetStatusRequest struct {
	Id string `json:"id"` // Id of the Light component instance.
}

// LightGetStatusResponse is the response of GetStatus.
type LightGetStatusResponse struct {
	Brightness     int    `json:"brightness"`                 // Brightness level (in percent)
	Id             string `json:"id"`                         // Id of the Light component instance.
	Output         bool   `json:"output"`                     // true if the output channel is currently on, false otherwise
	Source         string `json:"source"`                     // Source of the last command, for example: init, WS_in, http, ...
	TimerDuration  int    `json:"timer_duration,omitempty"`   // Duration of the timer in seconds (shown if the timer is triggered)
	TimerStartedAt int    `json:"timer_started_at,omitempty"` // Unix timestamp, start time of the timer (in UTC) (shown if the timer is triggered)
}

// readResponse reads the response into the given interface.
func (r *LightGetStatusResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// GetStatus
func (c LightClient) GetStatus(args LightGetStatusRequest) (resp *LightGetStatusResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Light.GetStatus", args, &reader.Response); err != nil {
		return
	}

	resp = &LightGetStatusResponse{}
	return resp, resp.readResponse(reader)
}

// Getbrightness returns the brightness value.
func (r *LightGetStatusResponse) GetBrightness() int {
	return r.Brightness
}

// Getid returns the id value.
func (r *LightGetStatusResponse) GetId() string {
	return r.Id
}

// Getoutput returns the output value.
func (r *LightGetStatusResponse) GetOutput() bool {
	return r.Output
}

// Getsource returns the source value.
func (r *LightGetStatusResponse) GetSource() string {
	return r.Source
}

// Gettimer_duration returns the timer_duration value.
func (r *LightGetStatusResponse) GetTimerDuration() int {
	return r.TimerDuration
}

// Gettimer_started_at returns the timer_started_at value.
func (r *LightGetStatusResponse) GetTimerStartedAt() int {
	return r.TimerStartedAt
}

/*
 > Command Light.SetConfig
 > This method sets the configuration of the Light component.
*/

// LightSetConfigRequest is the request of SetConfig.
type LightSetConfigRequest struct {
	Config LightSetConfigRequestConfig `json:"config,omitempty"` // Optional. Configuration that the method takes.
	Id     string                      `json:"id"`               // Id of the Light component instance.
}

// LightSetConfigRequestConfig is the request of config.
type LightSetConfigRequestConfig struct {
	AutoOff                bool     `json:"auto_off"`                     // True if the "Automatic OFF" function is enabled, false otherwise
	AutoOffDelay           int      `json:"auto_off_delay"`               // Seconds to pass until the component is switched back off
	AutoOn                 bool     `json:"auto_on"`                      // True if the "Automatic ON" function is enabled, false otherwise
	AutoOnDelay            int      `json:"auto_on_delay"`                // Seconds to pass until the component is switched back on
	DefaultBrightness      int      `json:"default.brightness,omitempty"` // Brightness level (in percent) after power on
	Id                     string   `json:"id"`                           // Id of the Light component instance.
	InitialState           string   `json:"initial_state"`                // Output state to set on power_on. Range of values: off, on, restore_last
	Name                   string   `json:"name,omitempty"`               // Name of the light instance.
	NightModeActiveBetween []string `json:"night_mode.active_between"`    // Containing 2 elements of type string, the first element indicates the start of the period during which the night mode will be active, the second indicates the end of that period. Both start and end are strings in the format HH:MM, where HH and MM are hours and minutes with optinal leading zeros.
	NightModeBrightness    int      `json:"night_mode.brightness"`        // Brightness level limit when night mode is active
	NightModeEnable        bool     `json:"night_mode.enable"`            // Enable or disable night mode
}

// LightSetConfigResponse is the response of SetConfig.
type LightSetConfigResponse struct {
}

// readResponse reads the response into the given interface.
func (r *LightSetConfigResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// SetConfig This method sets the configuration of the Light component.
func (c LightClient) SetConfig(args LightSetConfigRequest) (resp *LightSetConfigResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Light.SetConfig", args, &reader.Response); err != nil {
		return
	}

	resp = &LightSetConfigResponse{}
	return resp, resp.readResponse(reader)
}

/*
 > Command Light.Set
 > This method sets the output of the Light component to on or off. At least one of the on and brightness parameters is required.
*/

// LightSetRequest is the request of Set.
type LightSetRequest struct {
	Brightness  int    `json:"brightness,omitempty"`   // Optional. Brightness level (in percent)
	Id          string `json:"id"`                     // Id of the Light component instance.
	On          bool   `json:"on,omitempty"`           // Optional. True for light on, false otherwise.
	ToggleAfter int    `json:"toggle_after,omitempty"` // Optional. Optional flip-back timer in seconds.
}

// LightSetResponse is the response of Set.
type LightSetResponse struct {
}

// readResponse reads the response into the given interface.
func (r *LightSetResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// Set This method sets the output of the Light component to on or off. At least one of the on and brightness parameters is required.
func (c LightClient) Set(args LightSetRequest) (resp *LightSetResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Light.Set", args, &reader.Response); err != nil {
		return
	}

	resp = &LightSetResponse{}
	return resp, resp.readResponse(reader)
}

/*
 > Command Light.Toggle
 > This method toggles the output of the Light component.
*/

// LightToggleRequest is the request of Toggle.
type LightToggleRequest struct {
	Id string `json:"id"` // Id of the Light component instance.
}

// LightToggleResponse is the response of Toggle.
type LightToggleResponse struct {
}

// readResponse reads the response into the given interface.
func (r *LightToggleResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// Toggle This method toggles the output of the Light component.
func (c LightClient) Toggle(args LightToggleRequest) (resp *LightToggleResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Light.Toggle", args, &reader.Response); err != nil {
		return
	}

	resp = &LightToggleResponse{}
	return resp, resp.readResponse(reader)
}
