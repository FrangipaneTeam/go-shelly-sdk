// code generated by go generate - look at command.go.tmpl for source file
package shelly

/*
 > Command Light.GetConfig
 >
*/

// LightGetConfigRequest is the request of GetConfig.
type LightGetConfigRequest struct {
	// Id of the Light component instance.
	Id float64 `json:"id"`
}

// LightGetConfigResponse is the response of GetConfig.
type LightGetConfigResponse struct {
	// True if the &#34;Automatic OFF&#34; function is enabled, false otherwise
	AutoOff bool `json:"auto_off"`
	// Seconds to pass until the component is switched back off
	AutoOffDelay float64 `json:"auto_off_delay"`
	// True if the &#34;Automatic ON&#34; function is enabled, false otherwise
	AutoOn bool `json:"auto_on"`
	// Seconds to pass until the component is switched back on
	AutoOnDelay float64 `json:"auto_on_delay"`
	// Optional. Brightness level (in percent) after power on
	DefaultBrightness float64 `json:"default.brightness"`
	// Id of the Light component instance.
	Id float64 `json:"id"`
	// Output state to set on power_on. Range of values: off, on, restore_last
	InitialState string `json:"initial_state"`
	// Optional. Name of the light instance.
	Name string `json:"name"`
	// Containing 2 elements of type string, the first element indicates the start of the period during which the night mode will be active, the second indicates the end of that period. Both start and end are strings in the format HH:MM, where HH and MM are hours and minutes with optinal leading zeros.
	NightModeActiveBetween []string `json:"night_mode.active_between"`
	// Brightness level limit when night mode is active
	NightModeBrightness float64 `json:"night_mode.brightness"`
	// Enable or disable night mode
	NightModeEnable bool `json:"night_mode.enable"`
}

// readResponse reads the response into the given interface.
func (r *LightGetConfigResponse) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// GetConfig
func (c LightClient) GetConfig(args LightGetConfigRequest) (resp *LightGetConfigResponse, err error) {
	reader := NewResponseReader()

	if err = c.call("Light.GetConfig", args, &reader.Response); err != nil {
		return
	}

	resp = &LightGetConfigResponse{}
	return resp, resp.readResponse(reader)
}

// Getauto_off returns the auto_off value.
func (r *LightGetConfigResponse) GetAutoOff() bool {
	return r.AutoOff
}

// Getauto_off_delay returns the auto_off_delay value.
func (r *LightGetConfigResponse) GetAutoOffDelay() float64 {
	return r.AutoOffDelay
}

// Getauto_on returns the auto_on value.
func (r *LightGetConfigResponse) GetAutoOn() bool {
	return r.AutoOn
}

// Getauto_on_delay returns the auto_on_delay value.
func (r *LightGetConfigResponse) GetAutoOnDelay() float64 {
	return r.AutoOnDelay
}

// Getdefault.brightness returns the default.brightness value.
func (r *LightGetConfigResponse) GetDefaultBrightness() float64 {
	return r.DefaultBrightness
}

// Getid returns the id value.
func (r *LightGetConfigResponse) GetId() float64 {
	return r.Id
}

// Getinitial_state returns the initial_state value.
func (r *LightGetConfigResponse) GetInitialState() string {
	return r.InitialState
}

// Getname returns the name value.
func (r *LightGetConfigResponse) GetName() string {
	return r.Name
}

// Getnight_mode.active_between returns the night_mode.active_between value.
func (r *LightGetConfigResponse) GetNightModeActiveBetween() []string {
	return r.NightModeActiveBetween
}

// Getnight_mode.brightness returns the night_mode.brightness value.
func (r *LightGetConfigResponse) GetNightModeBrightness() float64 {
	return r.NightModeBrightness
}

// Getnight_mode.enable returns the night_mode.enable value.
func (r *LightGetConfigResponse) GetNightModeEnable() bool {
	return r.NightModeEnable
}

/*
 > Command Light.GetStatus
 >
*/

// LightGetStatusRequest is the request of GetStatus.
type LightGetStatusRequest struct {
	// Id of the Light component instance.
	Id float64 `json:"id"`
}

// LightGetStatusResponse is the response of GetStatus.
type LightGetStatusResponse struct {
	// Brightness level (in percent)
	Brightness float64 `json:"brightness"`
	// Id of the Light component instance.
	Id float64 `json:"id"`
	// true if the output channel is currently on, false otherwise
	Output bool `json:"output"`
	// Source of the last command, for example: init, WS_in, http, ...
	Source string `json:"source"`
	// Optional. Duration of the timer in seconds (shown if the timer is triggered)
	TimerDuration float64 `json:"timer_duration"`
	// Optional. Unix timestamp, start time of the timer (in UTC) (shown if the timer is triggered)
	TimerStartedAt float64 `json:"timer_started_at"`
}

// readResponse reads the response into the given interface.
func (r *LightGetStatusResponse) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// GetStatus
func (c LightClient) GetStatus(args LightGetStatusRequest) (resp *LightGetStatusResponse, err error) {
	reader := NewResponseReader()

	if err = c.call("Light.GetStatus", args, &reader.Response); err != nil {
		return
	}

	resp = &LightGetStatusResponse{}
	return resp, resp.readResponse(reader)
}

// Getbrightness returns the brightness value.
func (r *LightGetStatusResponse) GetBrightness() float64 {
	return r.Brightness
}

// Getid returns the id value.
func (r *LightGetStatusResponse) GetId() float64 {
	return r.Id
}

// Getoutput returns the output value.
func (r *LightGetStatusResponse) GetOutput() bool {
	return r.Output
}

// Getsource returns the source value.
func (r *LightGetStatusResponse) GetSource() string {
	return r.Source
}

// Gettimer_duration returns the timer_duration value.
func (r *LightGetStatusResponse) GetTimerDuration() float64 {
	return r.TimerDuration
}

// Gettimer_started_at returns the timer_started_at value.
func (r *LightGetStatusResponse) GetTimerStartedAt() float64 {
	return r.TimerStartedAt
}

/*
 > Command Light.SetConfig
 > This method sets the configuration of the Light component.
*/

// LightSetConfigRequest is the request of SetConfig.
type LightSetConfigRequest struct {
	// Optional. Configuration that the method takes.
	Config LightSetConfigRequestConfig `json:"config,omitempty"`
	// Id of the Light component instance.
	Id float64 `json:"id"`
}

// Extra LightSetConfigRequestConfig is the request of LightSetConfigRequestConfig.
type LightSetConfigRequestConfig struct {
	// True if the &#34;Automatic OFF&#34; function is enabled, false otherwise
	AutoOff bool `json:"auto_off"`
	// Seconds to pass until the component is switched back off
	AutoOffDelay float64 `json:"auto_off_delay"`
	// True if the &#34;Automatic ON&#34; function is enabled, false otherwise
	AutoOn bool `json:"auto_on"`
	// Seconds to pass until the component is switched back on
	AutoOnDelay float64 `json:"auto_on_delay"`
	// Optional. Brightness level (in percent) after power on
	DefaultBrightness float64 `json:"default.brightness"`
	// Id of the Light component instance.
	Id float64 `json:"id"`
	// Output state to set on power_on. Range of values: off, on, restore_last
	InitialState string `json:"initial_state"`
	// Optional. Name of the light instance.
	Name string `json:"name"`
	// Containing 2 elements of type string, the first element indicates the start of the period during which the night mode will be active, the second indicates the end of that period. Both start and end are strings in the format HH:MM, where HH and MM are hours and minutes with optinal leading zeros.
	NightModeActiveBetween []string `json:"night_mode.active_between"`
	// Brightness level limit when night mode is active
	NightModeBrightness float64 `json:"night_mode.brightness"`
	// Enable or disable night mode
	NightModeEnable bool `json:"night_mode.enable"`
}

// LightSetConfigResponse is the response of SetConfig.
type LightSetConfigResponse struct {
}

// readResponse reads the response into the given interface.
func (r *LightSetConfigResponse) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// SetConfig This method sets the configuration of the Light component.
func (c LightClient) SetConfig(args LightSetConfigRequest) (resp *LightSetConfigResponse, err error) {
	reader := NewResponseReader()

	if err = c.call("Light.SetConfig", args, &reader.Response); err != nil {
		return
	}

	resp = &LightSetConfigResponse{}
	return resp, resp.readResponse(reader)
}

/*
 > Command Light.Set
 > This method sets the output of the Light component to on or off. At least one of the on and brightness parameters is required.
*/

// LightSetRequest is the request of Set.
type LightSetRequest struct {
	// Optional. Brightness level (in percent)
	Brightness float64 `json:"brightness"`
	// Id of the Light component instance.
	Id float64 `json:"id"`
	// Optional. True for light on, false otherwise.
	On bool `json:"on"`
	// Optional. Optional flip-back timer in seconds.
	ToggleAfter float64 `json:"toggle_after"`
}

// LightSetResponse is the response of Set.
type LightSetResponse struct {
}

// readResponse reads the response into the given interface.
func (r *LightSetResponse) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// Set This method sets the output of the Light component to on or off. At least one of the on and brightness parameters is required.
func (c LightClient) Set(args LightSetRequest) (resp *LightSetResponse, err error) {
	reader := NewResponseReader()

	if err = c.call("Light.Set", args, &reader.Response); err != nil {
		return
	}

	resp = &LightSetResponse{}
	return resp, resp.readResponse(reader)
}

/*
 > Command Light.Toggle
 > This method toggles the output of the Light component.
*/

// LightToggleRequest is the request of Toggle.
type LightToggleRequest struct {
	// Id of the Light component instance.
	Id float64 `json:"id"`
}

// LightToggleResponse is the response of Toggle.
type LightToggleResponse struct {
}

// readResponse reads the response into the given interface.
func (r *LightToggleResponse) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// Toggle This method toggles the output of the Light component.
func (c LightClient) Toggle(args LightToggleRequest) (resp *LightToggleResponse, err error) {
	reader := NewResponseReader()

	if err = c.call("Light.Toggle", args, &reader.Response); err != nil {
		return
	}

	resp = &LightToggleResponse{}
	return resp, resp.readResponse(reader)
}
