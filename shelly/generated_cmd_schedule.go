// code generated by go generate - look at command.go.tmpl for source file
package shelly

/*
 > Command Schedule.Create
 > This method creates a new schedule job
*/

// ScheduleCreateRequest is the request of Create.
type ScheduleCreateRequest struct {
	Calls    []ScheduleCreateRequestCalls `json:"calls"`    // RPC methods and arguments to be invoked when the job gets executed. It must contain at least one valid object. There is a limit of 5 calls per schedule
	Enable   bool                         `json:"enable"`   // true to enable the execution of this job, false otherwise. It is true by default.
	Timespec string                       `json:"timespec"` // As defined by cron. Note that leading 0s are not supported (e.g.: for 8 AM you should set 8 instead of 08).
}

// ScheduleCreateRequestCalls is the request of calls.
type ScheduleCreateRequestCalls struct {
	Method string      `json:"method"` // Name of the RPC method
	Params interface{} `json:"params"` // The parameters used to invoke the RPC call. If the call requires no parameters params will be omitted
}

// ScheduleCreateResponse is the response of Create.
type ScheduleCreateResponse struct {
}

// readResponse reads the response into the given interface.
func (r *ScheduleCreateResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// Create This method creates a new schedule job
func (c ScheduleClient) Create(args ScheduleCreateRequest) (resp *ScheduleCreateResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Schedule.Create", args, &reader.Response); err != nil {
		return
	}

	resp = &ScheduleCreateResponse{}
	return resp, resp.readResponse(reader)
}

/*
 > Command Schedule.Update
 > This method updates an existing schedule job
*/

// ScheduleUpdateRequest is the request of Update.
type ScheduleUpdateRequest struct {
	Calls    []ScheduleUpdateRequestCalls `json:"calls"`    // RPC methods and arguments to be invoked when the job gets executed. It must contain at least one valid object. There is a limit of 5 calls per schedule
	Enable   bool                         `json:"enable"`   // true to enable the execution of this job, false otherwise. It is true by default.
	Id       string                       `json:"id"`       // The numeric ID of the Schedule component instance
	Timespec string                       `json:"timespec"` // As defined by cron. Note that leading 0s are not supported (e.g.: for 8 AM you should set 8 instead of 08).
}

// ScheduleUpdateRequestCalls is the request of calls.
type ScheduleUpdateRequestCalls struct {
	Method string      `json:"method"` // Name of the RPC method
	Params interface{} `json:"params"` // The parameters used to invoke the RPC call. If the call requires no parameters params will be omitted
}

// ScheduleUpdateResponse is the response of Update.
type ScheduleUpdateResponse struct {
	Rev int `json:"rev"` // Current revision number of the schedule instances
}

// readResponse reads the response into the given interface.
func (r *ScheduleUpdateResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// Update This method updates an existing schedule job
func (c ScheduleClient) Update(args ScheduleUpdateRequest) (resp *ScheduleUpdateResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Schedule.Update", args, &reader.Response); err != nil {
		return
	}

	resp = &ScheduleUpdateResponse{}
	return resp, resp.readResponse(reader)
}

// Getrev returns the rev value.
func (r *ScheduleUpdateResponse) GetRev() int {
	return r.Rev
}

/*
 > Command Schedule.List
 > This method returns a list of all schedule jobs
*/

// ScheduleListRequest is the request of List.
type ScheduleListRequest struct {
}

// ScheduleListResponse is the response of List.
type ScheduleListResponse struct {
	Jobs []ScheduleListResponseJobs `json:"jobs"` // Each entry is a schedule job object
	Rev  int                        `json:"rev"`  // Current revision number of the schedule instances
}

// ScheduleListResponseJobsCalls is the response of JobsCalls.
type ScheduleListResponseJobsCalls struct {
	Method string      `json:"method"` // Name of the RPC method
	Params interface{} `json:"params"` // The parameters used to invoke the RPC call. If the call requires no parameters params will be omitted
}

// ScheduleListResponseJobs is the response of jobs.
type ScheduleListResponseJobs struct {
	Calls    []ScheduleListResponseJobsCalls `json:"calls"`    // RPC methods and arguments to be invoked when the job gets executed. It must contain at least one valid object. There is a limit of 5 calls per schedule
	Enable   bool                            `json:"enable"`   // true to enable the execution of this job, false otherwise. It is true by default.
	Id       string                          `json:"id"`       // The numeric ID of the Schedule component instance
	Timespec string                          `json:"timespec"` // As defined by cron. Note that leading 0s are not supported (e.g.: for 8 AM you should set 8 instead of 08).
}

// readResponse reads the response into the given interface.
func (r *ScheduleListResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// List This method returns a list of all schedule jobs
func (c ScheduleClient) List(args ScheduleListRequest) (resp *ScheduleListResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Schedule.List", args, &reader.Response); err != nil {
		return
	}

	resp = &ScheduleListResponse{}
	return resp, resp.readResponse(reader)
}

// Getjobs returns the jobs value.
func (r *ScheduleListResponse) GetJobs() []ScheduleListResponseJobs {
	return r.Jobs
}

// Getrev returns the rev value.
func (r *ScheduleListResponse) GetRev() int {
	return r.Rev
}

// Getmethod returns the method value.
func (r *ScheduleListResponseJobsCalls) GetMethod() string {
	return r.Method
}

// Getparams returns the params value.
func (r *ScheduleListResponseJobsCalls) GetParams() interface{} {
	return r.Params
}

// Getcalls returns the calls value.
func (r *ScheduleListResponseJobs) GetCalls() []ScheduleListResponseJobsCalls {
	return r.Calls
}

// Getenable returns the enable value.
func (r *ScheduleListResponseJobs) GetEnable() bool {
	return r.Enable
}

// Getid returns the id value.
func (r *ScheduleListResponseJobs) GetId() string {
	return r.Id
}

// Gettimespec returns the timespec value.
func (r *ScheduleListResponseJobs) GetTimespec() string {
	return r.Timespec
}

/*
 > Command Schedule.Delete
 > This method deletes an existing schedule job
*/

// ScheduleDeleteRequest is the request of Delete.
type ScheduleDeleteRequest struct {
	Id string `json:"id"` // The numeric ID of the Schedule component instance
}

// ScheduleDeleteResponse is the response of Delete.
type ScheduleDeleteResponse struct {
	Rev int `json:"rev"` // Current revision number of the schedule instances
}

// readResponse reads the response into the given interface.
func (r *ScheduleDeleteResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// Delete This method deletes an existing schedule job
func (c ScheduleClient) Delete(args ScheduleDeleteRequest) (resp *ScheduleDeleteResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Schedule.Delete", args, &reader.Response); err != nil {
		return
	}

	resp = &ScheduleDeleteResponse{}
	return resp, resp.readResponse(reader)
}

// Getrev returns the rev value.
func (r *ScheduleDeleteResponse) GetRev() int {
	return r.Rev
}

/*
 > Command Schedule.DeleteAll
 > This method deletes all existing schedule jobs
*/

// ScheduleDeleteAllRequest is the request of DeleteAll.
type ScheduleDeleteAllRequest struct {
}

// ScheduleDeleteAllResponse is the response of DeleteAll.
type ScheduleDeleteAllResponse struct {
	Rev int `json:"rev"` // Current revision number of the schedule instances
}

// readResponse reads the response into the given interface.
func (r *ScheduleDeleteAllResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// DeleteAll This method deletes all existing schedule jobs
func (c ScheduleClient) DeleteAll(args ScheduleDeleteAllRequest) (resp *ScheduleDeleteAllResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Schedule.DeleteAll", args, &reader.Response); err != nil {
		return
	}

	resp = &ScheduleDeleteAllResponse{}
	return resp, resp.readResponse(reader)
}

// Getrev returns the rev value.
func (r *ScheduleDeleteAllResponse) GetRev() int {
	return r.Rev
}
