// code generated by go generate - look at command.go.tmpl for source file
package shelly

/*
 > Command Shelly.ListMethods
 > This method lists all available RPC methods. It takes into account both ACL and authentication restrictions and only lists the methods allowed for the particular user/channel that&#39;s making the request.
*/

// ShellyListMethodsRequest is the request of ListMethods.
type ShellyListMethodsRequest struct {
}

// ShellyListMethodsResponse is the response of ListMethods.
type ShellyListMethodsResponse struct {
	// Names of the methods allowed.
	Methods []string `json:"methods"`
}

// readResponse reads the response into the given interface.
func (r *ShellyListMethodsResponse) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// ListMethods This method lists all available RPC methods. It takes into account both ACL and authentication restrictions and only lists the methods allowed for the particular user/channel that&#39;s making the request.
func (c ShellyClient) ListMethods(args ShellyListMethodsRequest) (resp *ShellyListMethodsResponse, err error) {
	reader := NewResponseReader()

	if err = c.call("Shelly.ListMethods", args, &reader.Response); err != nil {
		return
	}

	resp = &ShellyListMethodsResponse{}
	return resp, resp.readResponse(reader)
}

// Getmethods returns the methods value.
func (r *ShellyListMethodsResponse) GetMethods() []string {
	return r.Methods
}

/*
 > Command Shelly.GetDeviceInfo
 > This method returns information about the device.
*/

// ShellyGetDeviceInfoRequest is the request of GetDeviceInfo.
type ShellyGetDeviceInfoRequest struct {
	// Optional. Flag specifying if extra identifying information should be displayed.
	Ident bool `json:"ident"`
}

// ShellyGetDeviceInfoResponse is the response of GetDeviceInfo.
type ShellyGetDeviceInfoResponse struct {
	// Application name.
	App string `json:"app"`
	// Name of the domain (null if authentication is not enabled).
	AuthDomain string `json:"auth_domain"`
	// true if authentication is enabled, false otherwise.
	AuthEn bool `json:"auth_en"`
	// Batch used to provision the device, present only when the ident parameter is set to true
	Batch string `json:"batch"`
	// true if the device is discoverable, false otherwise.
	Discoverable bool `json:"discoverable"`
	// Id of the firmware of the device.
	FwId string `json:"fw_id"`
	// Shelly internal flags, present only when the ident parameter is set to true
	FwSbits string `json:"fw_sbits"`
	// Generation of the device.
	Gen float64 `json:"gen"`
	// Id of the device.
	Id string `json:"id"`
	// Cloud key of the device (see note below), present only when the ident parameter is set to true
	Key string `json:"key"`
	// MAC address of the device.
	Mac string `json:"mac"`
	// Model of the device.
	Model string `json:"model"`
	// Name of the device profile (only applicable for multi-profile devices).
	Profile string `json:"profile"`
	// Version of the firmware of the device.
	Ver string `json:"ver"`
}

// readResponse reads the response into the given interface.
func (r *ShellyGetDeviceInfoResponse) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// GetDeviceInfo This method returns information about the device.
func (c ShellyClient) GetDeviceInfo(args ShellyGetDeviceInfoRequest) (resp *ShellyGetDeviceInfoResponse, err error) {
	reader := NewResponseReader()

	if err = c.call("Shelly.GetDeviceInfo", args, &reader.Response); err != nil {
		return
	}

	resp = &ShellyGetDeviceInfoResponse{}
	return resp, resp.readResponse(reader)
}

// Getapp returns the app value.
func (r *ShellyGetDeviceInfoResponse) GetApp() string {
	return r.App
}

// Getauth_domain returns the auth_domain value.
func (r *ShellyGetDeviceInfoResponse) GetAuthDomain() string {
	return r.AuthDomain
}

// Getauth_en returns the auth_en value.
func (r *ShellyGetDeviceInfoResponse) GetAuthEn() bool {
	return r.AuthEn
}

// Getbatch returns the batch value.
func (r *ShellyGetDeviceInfoResponse) GetBatch() string {
	return r.Batch
}

// Getdiscoverable returns the discoverable value.
func (r *ShellyGetDeviceInfoResponse) GetDiscoverable() bool {
	return r.Discoverable
}

// Getfw_id returns the fw_id value.
func (r *ShellyGetDeviceInfoResponse) GetFwId() string {
	return r.FwId
}

// Getfw_sbits returns the fw_sbits value.
func (r *ShellyGetDeviceInfoResponse) GetFwSbits() string {
	return r.FwSbits
}

// Getgen returns the gen value.
func (r *ShellyGetDeviceInfoResponse) GetGen() float64 {
	return r.Gen
}

// Getid returns the id value.
func (r *ShellyGetDeviceInfoResponse) GetId() string {
	return r.Id
}

// Getkey returns the key value.
func (r *ShellyGetDeviceInfoResponse) GetKey() string {
	return r.Key
}

// Getmac returns the mac value.
func (r *ShellyGetDeviceInfoResponse) GetMac() string {
	return r.Mac
}

// Getmodel returns the model value.
func (r *ShellyGetDeviceInfoResponse) GetModel() string {
	return r.Model
}

// Getprofile returns the profile value.
func (r *ShellyGetDeviceInfoResponse) GetProfile() string {
	return r.Profile
}

// Getver returns the ver value.
func (r *ShellyGetDeviceInfoResponse) GetVer() string {
	return r.Ver
}
