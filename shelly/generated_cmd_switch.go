// code generated by go generate - look at command.go.tmpl for source file
package shelly

/*
 > Command Switch.SetConfig
 >
*/

// SwitchSetConfigRequest is the request of SetConfig.
type SwitchSetConfigRequest struct {
	Config SwitchSetConfigRequestConfig `json:"config,omitempty"` // Optional. Configuration that the method takes.
	Id     string                       `json:"id"`               // Id of the Switch component instance.
}

// SwitchSetConfigRequestConfig is the request of config.
type SwitchSetConfigRequestConfig struct {
	AutoOff                  bool   `json:"auto_off"`                     // True if the "Automatic OFF" function is enabled, false otherwise
	AutoOffDelay             int    `json:"auto_off_delay"`               // Seconds to pass until the component is switched back off
	AutoOn                   bool   `json:"auto_on"`                      // True if the "Automatic ON" function is enabled, false otherwise
	AutoOnDelay              int    `json:"auto_on_delay"`                // Seconds to pass until the component is switched back on
	AutorecoverVoltageErrors bool   `json:"autorecover_voltage_errors"`   // True if switch output state should be restored after over/undervoltage error is cleared, false otherwise (shown if applicable)
	CurrentLimit             int    `json:"current_limit,omitempty"`      // int, limit (in Amperes) over which overcurrent condition occurs (shown if applicable)
	Id                       string `json:"id"`                           // Id of the Switch component instance.
	InMode                   string `json:"in_mode"`                      // Mode of the associated input. Range of values: momentary, follow, flip, detached
	InitialState             string `json:"initial_state"`                // Output state to set on power_on. Range of values: off, on, restore_last, match_input
	InputId                  int    `json:"input_id"`                     // Id of the Input component which controls the Switch. Applicable only to Pro1 and Pro1PM devices. Valid values: 0, 1
	Name                     string `json:"name,omitempty"`               // Name of the switch instance.
	PowerLimit               int    `json:"power_limit,omitempty"`        // Limit (in Watts) over which overpower condition occurs (shown if applicable)
	UndervoltageLimit        int    `json:"undervoltage_limit,omitempty"` // Limit (in Volts) under which undervoltage condition occurs (shown if applicable)
	VoltageLimit             int    `json:"voltage_limit,omitempty"`      // Limit (in Volts) over which overvoltage condition occurs (shown if applicable)
}

// SwitchSetConfigResponse is the response of SetConfig.
type SwitchSetConfigResponse struct {
}

// readResponse reads the response into the given interface.
func (r *SwitchSetConfigResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// SetConfig
func (c SwitchClient) SetConfig(args SwitchSetConfigRequest) (resp *SwitchSetConfigResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Switch.SetConfig", args, &reader.Response); err != nil {
		return
	}

	resp = &SwitchSetConfigResponse{}
	return resp, resp.readResponse(reader)
}

/*
 > Command Switch.GetConfig
 >
*/

// SwitchGetConfigRequest is the request of GetConfig.
type SwitchGetConfigRequest struct {
	Id string `json:"id"` // Id of the Switch component instance.
}

// SwitchGetConfigResponse is the response of GetConfig.
type SwitchGetConfigResponse struct {
	AutoOff                  bool   `json:"auto_off"`                     // True if the "Automatic OFF" function is enabled, false otherwise
	AutoOffDelay             int    `json:"auto_off_delay"`               // Seconds to pass until the component is switched back off
	AutoOn                   bool   `json:"auto_on"`                      // True if the "Automatic ON" function is enabled, false otherwise
	AutoOnDelay              int    `json:"auto_on_delay"`                // Seconds to pass until the component is switched back on
	AutorecoverVoltageErrors bool   `json:"autorecover_voltage_errors"`   // True if switch output state should be restored after over/undervoltage error is cleared, false otherwise (shown if applicable)
	CurrentLimit             int    `json:"current_limit,omitempty"`      // int, limit (in Amperes) over which overcurrent condition occurs (shown if applicable)
	Id                       string `json:"id"`                           // Id of the Switch component instance.
	InMode                   string `json:"in_mode"`                      // Mode of the associated input. Range of values: momentary, follow, flip, detached
	InitialState             string `json:"initial_state"`                // Output state to set on power_on. Range of values: off, on, restore_last, match_input
	InputId                  int    `json:"input_id"`                     // Id of the Input component which controls the Switch. Applicable only to Pro1 and Pro1PM devices. Valid values: 0, 1
	Name                     string `json:"name,omitempty"`               // Name of the switch instance.
	PowerLimit               int    `json:"power_limit,omitempty"`        // Limit (in Watts) over which overpower condition occurs (shown if applicable)
	UndervoltageLimit        int    `json:"undervoltage_limit,omitempty"` // Limit (in Volts) under which undervoltage condition occurs (shown if applicable)
	VoltageLimit             int    `json:"voltage_limit,omitempty"`      // Limit (in Volts) over which overvoltage condition occurs (shown if applicable)
}

// readResponse reads the response into the given interface.
func (r *SwitchGetConfigResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// GetConfig
func (c SwitchClient) GetConfig(args SwitchGetConfigRequest) (resp *SwitchGetConfigResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Switch.GetConfig", args, &reader.Response); err != nil {
		return
	}

	resp = &SwitchGetConfigResponse{}
	return resp, resp.readResponse(reader)
}

// Getauto_off returns the auto_off value.
func (r *SwitchGetConfigResponse) GetAutoOff() bool {
	return r.AutoOff
}

// Getauto_off_delay returns the auto_off_delay value.
func (r *SwitchGetConfigResponse) GetAutoOffDelay() int {
	return r.AutoOffDelay
}

// Getauto_on returns the auto_on value.
func (r *SwitchGetConfigResponse) GetAutoOn() bool {
	return r.AutoOn
}

// Getauto_on_delay returns the auto_on_delay value.
func (r *SwitchGetConfigResponse) GetAutoOnDelay() int {
	return r.AutoOnDelay
}

// Getautorecover_voltage_errors returns the autorecover_voltage_errors value.
func (r *SwitchGetConfigResponse) GetAutorecoverVoltageErrors() bool {
	return r.AutorecoverVoltageErrors
}

// Getcurrent_limit returns the current_limit value.
func (r *SwitchGetConfigResponse) GetCurrentLimit() int {
	return r.CurrentLimit
}

// Getid returns the id value.
func (r *SwitchGetConfigResponse) GetId() string {
	return r.Id
}

// Getin_mode returns the in_mode value.
func (r *SwitchGetConfigResponse) GetInMode() string {
	return r.InMode
}

// Getinitial_state returns the initial_state value.
func (r *SwitchGetConfigResponse) GetInitialState() string {
	return r.InitialState
}

// Getinput_id returns the input_id value.
func (r *SwitchGetConfigResponse) GetInputId() int {
	return r.InputId
}

// Getname returns the name value.
func (r *SwitchGetConfigResponse) GetName() string {
	return r.Name
}

// Getpower_limit returns the power_limit value.
func (r *SwitchGetConfigResponse) GetPowerLimit() int {
	return r.PowerLimit
}

// Getundervoltage_limit returns the undervoltage_limit value.
func (r *SwitchGetConfigResponse) GetUndervoltageLimit() int {
	return r.UndervoltageLimit
}

// Getvoltage_limit returns the voltage_limit value.
func (r *SwitchGetConfigResponse) GetVoltageLimit() int {
	return r.VoltageLimit
}

/*
 > Command Switch.GetStatus
 >
*/

// SwitchGetStatusRequest is the request of GetStatus.
type SwitchGetStatusRequest struct {
	Id string `json:"id"` // Id of the Switch component instance.
}

// SwitchGetStatusResponse is the response of GetStatus.
type SwitchGetStatusResponse struct {
	Aenergy        SwitchGetStatusResponseAenergy     `json:"aenergy,omitempty"`          // Optional. Information about the active energy counter (shown if applicable)
	Apower         int                                `json:"apower,omitempty"`           // Last measured instantaneous active power (in Watts) delivered to the attached load (shown if applicable)
	Current        int                                `json:"current,omitempty"`          // Last measured current in Amperes (shown if applicable)
	Errors         []string                           `json:"errors,omitempty"`           // Error conditions occurred. May contain overtemp, overpower, overvoltage, undervoltage, (shown if at least one error is present)
	Id             string                             `json:"id"`                         // Id of the Switch component instance.
	Output         bool                               `json:"output"`                     // true if the output channel is currently on, false otherwise
	Pf             int                                `json:"pf,omitempty"`               // Last measured power factor (shown if applicable)
	Source         string                             `json:"source"`                     // Source of the last command, for example: init, WS_in, http, ...
	Temperature    SwitchGetStatusResponseTemperature `json:"temperature"`                // Information about the temperature
	TimerDuration  int                                `json:"timer_duration,omitempty"`   // Duration of the timer in seconds (shown if the timer is triggered)
	TimerStartedAt int                                `json:"timer_started_at,omitempty"` // Unix timestamp, start time of the timer (in UTC) (shown if the timer is triggered)
	Voltage        int                                `json:"voltage,omitempty"`          // Last measured voltage in Volts (shown if applicable)
}

// SwitchGetStatusResponseAenergy is the response of aenergy.
type SwitchGetStatusResponseAenergy struct {
	ByMinute []int `json:"by_minute"` // Energy consumption by minute (in Milliwatt-hours) for the last three minutes (the lower the index of the element in the array, the closer to the current moment the minute)
	MinuteTs int   `json:"minute_ts"` // Unix timestamp of the first second of the last minute (in UTC)
	Total    int   `json:"total"`     // Total energy consumed in Watt-hours
}

// SwitchGetStatusResponseTemperature is the response of temperature.
type SwitchGetStatusResponseTemperature struct {
	TC int `json:"tc"` // Temperature in Celsius (null if temperature is out of the measurement range)
	TF int `json:"tf"` // Temperature in Fahrenheit (null if temperature is out of the measurement range)
}

// readResponse reads the response into the given interface.
func (r *SwitchGetStatusResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// GetStatus
func (c SwitchClient) GetStatus(args SwitchGetStatusRequest) (resp *SwitchGetStatusResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Switch.GetStatus", args, &reader.Response); err != nil {
		return
	}

	resp = &SwitchGetStatusResponse{}
	return resp, resp.readResponse(reader)
}

// Getaenergy returns the aenergy value.
func (r *SwitchGetStatusResponse) GetAenergy() SwitchGetStatusResponseAenergy {
	return r.Aenergy
}

// Getapower returns the apower value.
func (r *SwitchGetStatusResponse) GetApower() int {
	return r.Apower
}

// Getcurrent returns the current value.
func (r *SwitchGetStatusResponse) GetCurrent() int {
	return r.Current
}

// Geterrors returns the errors value.
func (r *SwitchGetStatusResponse) GetErrors() []string {
	return r.Errors
}

// Getid returns the id value.
func (r *SwitchGetStatusResponse) GetId() string {
	return r.Id
}

// Getoutput returns the output value.
func (r *SwitchGetStatusResponse) GetOutput() bool {
	return r.Output
}

// Getpf returns the pf value.
func (r *SwitchGetStatusResponse) GetPf() int {
	return r.Pf
}

// Getsource returns the source value.
func (r *SwitchGetStatusResponse) GetSource() string {
	return r.Source
}

// Gettemperature returns the temperature value.
func (r *SwitchGetStatusResponse) GetTemperature() SwitchGetStatusResponseTemperature {
	return r.Temperature
}

// Gettimer_duration returns the timer_duration value.
func (r *SwitchGetStatusResponse) GetTimerDuration() int {
	return r.TimerDuration
}

// Gettimer_started_at returns the timer_started_at value.
func (r *SwitchGetStatusResponse) GetTimerStartedAt() int {
	return r.TimerStartedAt
}

// Getvoltage returns the voltage value.
func (r *SwitchGetStatusResponse) GetVoltage() int {
	return r.Voltage
}

// Getby_minute returns the by_minute value.
func (r *SwitchGetStatusResponseAenergy) GetByMinute() []int {
	return r.ByMinute
}

// Getminute_ts returns the minute_ts value.
func (r *SwitchGetStatusResponseAenergy) GetMinuteTs() int {
	return r.MinuteTs
}

// Gettotal returns the total value.
func (r *SwitchGetStatusResponseAenergy) GetTotal() int {
	return r.Total
}

// GettC returns the tC value.
func (r *SwitchGetStatusResponseTemperature) GetTC() int {
	return r.TC
}

// GettF returns the tF value.
func (r *SwitchGetStatusResponseTemperature) GetTF() int {
	return r.TF
}

/*
 > Command Switch.Toggle
 >
*/

// SwitchToggleRequest is the request of Toggle.
type SwitchToggleRequest struct {
	Id int `json:"id"` // Id of the Switch component instance.
}

// SwitchToggleResponse is the response of Toggle.
type SwitchToggleResponse struct {
	WasOn bool `json:"was_on"` // True if the switch was on before the method was executed, false otherwise.
}

// readResponse reads the response into the given interface.
func (r *SwitchToggleResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// Toggle
func (c SwitchClient) Toggle(args SwitchToggleRequest) (resp *SwitchToggleResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Switch.Toggle", args, &reader.Response); err != nil {
		return
	}

	resp = &SwitchToggleResponse{}
	return resp, resp.readResponse(reader)
}

// Getwas_on returns the was_on value.
func (r *SwitchToggleResponse) GetWasOn() bool {
	return r.WasOn
}

/*
 > Command Switch.Set
 > This method sets the output of the Switch component to on or off.
*/

// SwitchSetRequest is the request of Set.
type SwitchSetRequest struct {
	Id          string `json:"id"`                     // Id of the Switch component instance.
	On          bool   `json:"on"`                     // True for switch on, false otherwise.
	ToggleAfter int    `json:"toggle_after,omitempty"` // Optional. int, seconds to wait before toggling the switch back to its previous state.
}

// SwitchSetResponse is the response of Set.
type SwitchSetResponse struct {
	WasOn bool `json:"was_on"` // True if the switch was on before the method was executed, false otherwise.
}

// readResponse reads the response into the given interface.
func (r *SwitchSetResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// Set This method sets the output of the Switch component to on or off.
func (c SwitchClient) Set(args SwitchSetRequest) (resp *SwitchSetResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("Switch.Set", args, &reader.Response); err != nil {
		return
	}

	resp = &SwitchSetResponse{}
	return resp, resp.readResponse(reader)
}

// Getwas_on returns the was_on value.
func (r *SwitchSetResponse) GetWasOn() bool {
	return r.WasOn
}
