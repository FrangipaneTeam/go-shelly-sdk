// code generated by go generate - look at command.go.tmpl for source file
package shelly

/*
 > Command Switch.SetConfig
 >
*/

// SwitchSetConfigRequest is the request of SetConfig.
type SwitchSetConfigRequest struct {
	// Optional. Configuration that the method takes.
	Config SwitchSetConfigRequestConfig `json:"config,omitempty"`
	// Id of the Switch component instance.
	Id float64 `json:"id"`
}

// Extra SwitchSetConfigRequestConfig is the request of SwitchSetConfigRequestConfig.
type SwitchSetConfigRequestConfig struct {
	// True if the &#34;Automatic OFF&#34; function is enabled, false otherwise
	AutoOff bool `json:"auto_off"`
	// Seconds to pass until the component is switched back off
	AutoOffDelay float64 `json:"auto_off_delay"`
	// True if the &#34;Automatic ON&#34; function is enabled, false otherwise
	AutoOn bool `json:"auto_on"`
	// Seconds to pass until the component is switched back on
	AutoOnDelay float64 `json:"auto_on_delay"`
	// True if switch output state should be restored after over/undervoltage error is cleared, false otherwise (shown if applicable)
	AutorecoverVoltageErrors bool `json:"autorecover_voltage_errors"`
	// Optional. int, limit (in Amperes) over which overcurrent condition occurs (shown if applicable)
	CurrentLimit float64 `json:"current_limit"`
	// Id of the Switch component instance.
	Id float64 `json:"id"`
	// Mode of the associated input. Range of values: momentary, follow, flip, detached
	InMode string `json:"in_mode"`
	// Output state to set on power_on. Range of values: off, on, restore_last, match_input
	InitialState string `json:"initial_state"`
	// Id of the Input component which controls the Switch. Applicable only to Pro1 and Pro1PM devices. Valid values: 0, 1
	InputId float64 `json:"input_id"`
	// Optional. Name of the switch instance.
	Name string `json:"name"`
	// Optional. Limit (in Watts) over which overpower condition occurs (shown if applicable)
	PowerLimit float64 `json:"power_limit"`
	// Optional. Limit (in Volts) under which undervoltage condition occurs (shown if applicable)
	UndervoltageLimit float64 `json:"undervoltage_limit"`
	// Optional. Limit (in Volts) over which overvoltage condition occurs (shown if applicable)
	VoltageLimit float64 `json:"voltage_limit"`
}

// SwitchSetConfigResponse is the response of SetConfig.
type SwitchSetConfigResponse struct {
}

// readResponse reads the response into the given interface.
func (r *SwitchSetConfigResponse) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// SetConfig
func (c SwitchClient) SetConfig(args SwitchSetConfigRequest) (resp *SwitchSetConfigResponse, err error) {
	reader := NewResponseReader()

	if err = c.call("Switch.SetConfig", args, &reader.Response); err != nil {
		return
	}

	resp = &SwitchSetConfigResponse{}
	return resp, resp.readResponse(reader)
}

/*
 > Command Switch.GetConfig
 >
*/

// SwitchGetConfigRequest is the request of GetConfig.
type SwitchGetConfigRequest struct {
	// Id of the Switch component instance.
	Id float64 `json:"id"`
}

// SwitchGetConfigResponse is the response of GetConfig.
type SwitchGetConfigResponse struct {
	// True if the &#34;Automatic OFF&#34; function is enabled, false otherwise
	AutoOff bool `json:"auto_off"`
	// Seconds to pass until the component is switched back off
	AutoOffDelay float64 `json:"auto_off_delay"`
	// True if the &#34;Automatic ON&#34; function is enabled, false otherwise
	AutoOn bool `json:"auto_on"`
	// Seconds to pass until the component is switched back on
	AutoOnDelay float64 `json:"auto_on_delay"`
	// True if switch output state should be restored after over/undervoltage error is cleared, false otherwise (shown if applicable)
	AutorecoverVoltageErrors bool `json:"autorecover_voltage_errors"`
	// Optional. int, limit (in Amperes) over which overcurrent condition occurs (shown if applicable)
	CurrentLimit float64 `json:"current_limit"`
	// Id of the Switch component instance.
	Id float64 `json:"id"`
	// Mode of the associated input. Range of values: momentary, follow, flip, detached
	InMode string `json:"in_mode"`
	// Output state to set on power_on. Range of values: off, on, restore_last, match_input
	InitialState string `json:"initial_state"`
	// Id of the Input component which controls the Switch. Applicable only to Pro1 and Pro1PM devices. Valid values: 0, 1
	InputId float64 `json:"input_id"`
	// Optional. Name of the switch instance.
	Name string `json:"name"`
	// Optional. Limit (in Watts) over which overpower condition occurs (shown if applicable)
	PowerLimit float64 `json:"power_limit"`
	// Optional. Limit (in Volts) under which undervoltage condition occurs (shown if applicable)
	UndervoltageLimit float64 `json:"undervoltage_limit"`
	// Optional. Limit (in Volts) over which overvoltage condition occurs (shown if applicable)
	VoltageLimit float64 `json:"voltage_limit"`
}

// readResponse reads the response into the given interface.
func (r *SwitchGetConfigResponse) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// GetConfig
func (c SwitchClient) GetConfig(args SwitchGetConfigRequest) (resp *SwitchGetConfigResponse, err error) {
	reader := NewResponseReader()

	if err = c.call("Switch.GetConfig", args, &reader.Response); err != nil {
		return
	}

	resp = &SwitchGetConfigResponse{}
	return resp, resp.readResponse(reader)
}

// Getauto_off returns the auto_off value.
func (r *SwitchGetConfigResponse) GetAutoOff() bool {
	return r.AutoOff
}

// Getauto_off_delay returns the auto_off_delay value.
func (r *SwitchGetConfigResponse) GetAutoOffDelay() float64 {
	return r.AutoOffDelay
}

// Getauto_on returns the auto_on value.
func (r *SwitchGetConfigResponse) GetAutoOn() bool {
	return r.AutoOn
}

// Getauto_on_delay returns the auto_on_delay value.
func (r *SwitchGetConfigResponse) GetAutoOnDelay() float64 {
	return r.AutoOnDelay
}

// Getautorecover_voltage_errors returns the autorecover_voltage_errors value.
func (r *SwitchGetConfigResponse) GetAutorecoverVoltageErrors() bool {
	return r.AutorecoverVoltageErrors
}

// Getcurrent_limit returns the current_limit value.
func (r *SwitchGetConfigResponse) GetCurrentLimit() float64 {
	return r.CurrentLimit
}

// Getid returns the id value.
func (r *SwitchGetConfigResponse) GetId() float64 {
	return r.Id
}

// Getin_mode returns the in_mode value.
func (r *SwitchGetConfigResponse) GetInMode() string {
	return r.InMode
}

// Getinitial_state returns the initial_state value.
func (r *SwitchGetConfigResponse) GetInitialState() string {
	return r.InitialState
}

// Getinput_id returns the input_id value.
func (r *SwitchGetConfigResponse) GetInputId() float64 {
	return r.InputId
}

// Getname returns the name value.
func (r *SwitchGetConfigResponse) GetName() string {
	return r.Name
}

// Getpower_limit returns the power_limit value.
func (r *SwitchGetConfigResponse) GetPowerLimit() float64 {
	return r.PowerLimit
}

// Getundervoltage_limit returns the undervoltage_limit value.
func (r *SwitchGetConfigResponse) GetUndervoltageLimit() float64 {
	return r.UndervoltageLimit
}

// Getvoltage_limit returns the voltage_limit value.
func (r *SwitchGetConfigResponse) GetVoltageLimit() float64 {
	return r.VoltageLimit
}

/*
 > Command Switch.GetStatus
 >
*/

// SwitchGetStatusRequest is the request of GetStatus.
type SwitchGetStatusRequest struct {
	// Id of the Switch component instance.
	Id float64 `json:"id"`
}

// SwitchGetStatusResponse is the response of GetStatus.
type SwitchGetStatusResponse struct {
	// Optional. Information about the active energy counter (shown if applicable)
	Aenergy SwitchGetStatusResponseAenergy `json:"aenergy,omitempty"`
	// Optional. Last measured instantaneous active power (in Watts) delivered to the attached load (shown if applicable)
	Apower float64 `json:"apower"`
	// Optional. Last measured current in Amperes (shown if applicable)
	Current float64 `json:"current"`
	// Optional. Error conditions occurred. May contain overtemp, overpower, overvoltage, undervoltage, (shown if at least one error is present)
	Errors []string `json:"errors"`
	// Id of the Switch component instance.
	Id float64 `json:"id"`
	// true if the output channel is currently on, false otherwise
	Output bool `json:"output"`
	// Optional. Last measured power factor (shown if applicable)
	Pf float64 `json:"pf"`
	// Source of the last command, for example: init, WS_in, http, ...
	Source string `json:"source"`
	// Information about the temperature
	Temperature SwitchGetStatusResponseTemperature `json:"temperature"`
	// Optional. Duration of the timer in seconds (shown if the timer is triggered)
	TimerDuration float64 `json:"timer_duration"`
	// Optional. Unix timestamp, start time of the timer (in UTC) (shown if the timer is triggered)
	TimerStartedAt float64 `json:"timer_started_at"`
	// Optional. Last measured voltage in Volts (shown if applicable)
	Voltage float64 `json:"voltage"`
}

// SwitchGetStatusResponseAenergy is the response of SwitchGetStatusResponseAenergy.
type SwitchGetStatusResponseAenergy struct {
	// Energy consumption by minute (in Milliwatt-hours) for the last three minutes (the lower the index of the element in the array, the closer to the current moment the minute)
	ByMinute []int `json:"by_minute"`
	// Unix timestamp of the first second of the last minute (in UTC)
	MinuteTs float64 `json:"minute_ts"`
	// Total energy consumed in Watt-hours
	Total float64 `json:"total"`
}

// SwitchGetStatusResponseTemperature is the response of SwitchGetStatusResponseTemperature.
type SwitchGetStatusResponseTemperature struct {
	// Temperature in Celsius (null if temperature is out of the measurement range)
	TC float64 `json:"tc"`
	// Temperature in Fahrenheit (null if temperature is out of the measurement range)
	TF float64 `json:"tf"`
}

// readResponse reads the response into the given interface.
func (r *SwitchGetStatusResponse) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// GetStatus
func (c SwitchClient) GetStatus(args SwitchGetStatusRequest) (resp *SwitchGetStatusResponse, err error) {
	reader := NewResponseReader()

	if err = c.call("Switch.GetStatus", args, &reader.Response); err != nil {
		return
	}

	resp = &SwitchGetStatusResponse{}
	return resp, resp.readResponse(reader)
}

// Getaenergy returns the aenergy value.
func (r *SwitchGetStatusResponse) GetAenergy() SwitchGetStatusResponseAenergy {
	return r.Aenergy
}

// Getapower returns the apower value.
func (r *SwitchGetStatusResponse) GetApower() float64 {
	return r.Apower
}

// Getcurrent returns the current value.
func (r *SwitchGetStatusResponse) GetCurrent() float64 {
	return r.Current
}

// Geterrors returns the errors value.
func (r *SwitchGetStatusResponse) GetErrors() []string {
	return r.Errors
}

// Getid returns the id value.
func (r *SwitchGetStatusResponse) GetId() float64 {
	return r.Id
}

// Getoutput returns the output value.
func (r *SwitchGetStatusResponse) GetOutput() bool {
	return r.Output
}

// Getpf returns the pf value.
func (r *SwitchGetStatusResponse) GetPf() float64 {
	return r.Pf
}

// Getsource returns the source value.
func (r *SwitchGetStatusResponse) GetSource() string {
	return r.Source
}

// Gettemperature returns the temperature value.
func (r *SwitchGetStatusResponse) GetTemperature() SwitchGetStatusResponseTemperature {
	return r.Temperature
}

// Gettimer_duration returns the timer_duration value.
func (r *SwitchGetStatusResponse) GetTimerDuration() float64 {
	return r.TimerDuration
}

// Gettimer_started_at returns the timer_started_at value.
func (r *SwitchGetStatusResponse) GetTimerStartedAt() float64 {
	return r.TimerStartedAt
}

// Getvoltage returns the voltage value.
func (r *SwitchGetStatusResponse) GetVoltage() float64 {
	return r.Voltage
}

// GetByMinute returns the by_minute value.
func (r *SwitchGetStatusResponseAenergy) GetByMinute() []int {
	return r.ByMinute
}

// GetMinuteTs returns the minute_ts value.
func (r *SwitchGetStatusResponseAenergy) GetMinuteTs() float64 {
	return r.MinuteTs
}

// GetTotal returns the total value.
func (r *SwitchGetStatusResponseAenergy) GetTotal() float64 {
	return r.Total
}

// GetTC returns the tC value.
func (r *SwitchGetStatusResponseTemperature) GetTC() float64 {
	return r.TC
}

// GetTF returns the tF value.
func (r *SwitchGetStatusResponseTemperature) GetTF() float64 {
	return r.TF
}

/*
 > Command Switch.Toggle
 >
*/

// SwitchToggleRequest is the request of Toggle.
type SwitchToggleRequest struct {
	// Id of the Switch component instance.
	Id float64 `json:"id"`
}

// SwitchToggleResponse is the response of Toggle.
type SwitchToggleResponse struct {
	// True if the switch was on before the method was executed, false otherwise.
	WasOn bool `json:"was_on"`
}

// readResponse reads the response into the given interface.
func (r *SwitchToggleResponse) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// Toggle
func (c SwitchClient) Toggle(args SwitchToggleRequest) (resp *SwitchToggleResponse, err error) {
	reader := NewResponseReader()

	if err = c.call("Switch.Toggle", args, &reader.Response); err != nil {
		return
	}

	resp = &SwitchToggleResponse{}
	return resp, resp.readResponse(reader)
}

// Getwas_on returns the was_on value.
func (r *SwitchToggleResponse) GetWasOn() bool {
	return r.WasOn
}

/*
 > Command Switch.Set
 > This method sets the output of the Switch component to on or off.
*/

// SwitchSetRequest is the request of Set.
type SwitchSetRequest struct {
	// Id of the Switch component instance.
	Id float64 `json:"id"`
	// True for switch on, false otherwise.
	On bool `json:"on"`
	// Optional. int, seconds to wait before toggling the switch back to its previous state.
	ToggleAfter float64 `json:"toggle_after"`
}

// SwitchSetResponse is the response of Set.
type SwitchSetResponse struct {
	// True if the switch was on before the method was executed, false otherwise.
	WasOn bool `json:"was_on"`
}

// readResponse reads the response into the given interface.
func (r *SwitchSetResponse) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// Set This method sets the output of the Switch component to on or off.
func (c SwitchClient) Set(args SwitchSetRequest) (resp *SwitchSetResponse, err error) {
	reader := NewResponseReader()

	if err = c.call("Switch.Set", args, &reader.Response); err != nil {
		return
	}

	resp = &SwitchSetResponse{}
	return resp, resp.readResponse(reader)
}

// Getwas_on returns the was_on value.
func (r *SwitchSetResponse) GetWasOn() bool {
	return r.WasOn
}
