// code generated by go generate - look at command.go.tmpl for source file
package shelly

/*
 > Command HTTP.GET
 > This method performs an HTTP GET request
*/

// HTTPGETRequest is the request of GET.
type HTTPGETRequest struct {
	SslCa   string `json:"ssl_ca,omitempty"`  // Optional. Type of the TCP socket. One of: null, user_ca.pem or *. If null, default value, the built-in ca.pem TLS CA is used for HTTPS requests. If user_ca.pem, the user CA will be used. If *, disabled certificate validation.
	Timeout int    `json:"timeout,omitempty"` // Optional. The timeout in seconds for the request.
	Url     string `json:"url"`               // The URL to be requested
}

// HTTPGETResponse is the response of GET.
type HTTPGETResponse struct {
	Body    string      `json:"body"`     // HTTP response body, if Content-Type is text or application/json
	BodyB64 string      `json:"body_b64"` // base64 encoded HTTP response body, if body is binary data. Maximum accepted length is 16KB (16384 bytes)
	Code    int         `json:"code"`     // Code of the HTTP response
	Headers interface{} `json:"headers"`  // List of HTTP headers sent by the server
	Message string      `json:"message"`  // Msssage of the HTTP response
}

// readResponse reads the response into the given interface.
func (r *HTTPGETResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// GET This method performs an HTTP GET request
func (c HTTPClient) GET(args HTTPGETRequest) (resp *HTTPGETResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("HTTP.GET", args, &reader.Response); err != nil {
		return
	}

	resp = &HTTPGETResponse{}
	return resp, resp.readResponse(reader)
}

// Getbody returns the body value.
func (r *HTTPGETResponse) GetBody() string {
	return r.Body
}

// Getbody_b64 returns the body_b64 value.
func (r *HTTPGETResponse) GetBodyB64() string {
	return r.BodyB64
}

// Getcode returns the code value.
func (r *HTTPGETResponse) GetCode() int {
	return r.Code
}

// Getheaders returns the headers value.
func (r *HTTPGETResponse) GetHeaders() interface{} {
	return r.Headers
}

// Getmessage returns the message value.
func (r *HTTPGETResponse) GetMessage() string {
	return r.Message
}

/*
 > Command HTTP.POST
 > This method performs an HTTP POST request
*/

// HTTPPOSTRequest is the request of POST.
type HTTPPOSTRequest struct {
	Body    string      `json:"body,omitempty"`     // Optional. HTTP request body, if Content-Type is text or application/json
	BodyB64 string      `json:"body_b64,omitempty"` // Optional. base64 encoded HTTP request body, if body is binary data. Maximum accepted length is 16KB (16384 bytes)
	Headers interface{} `json:"headers"`            // List of HTTP headers to be sent to the server
	SslCa   string      `json:"ssl_ca,omitempty"`   // Optional. Type of the TCP socket. One of: null, user_ca.pem or *. If null, default value, the built-in ca.pem TLS CA is used for HTTPS requests. If user_ca.pem, the user CA will be used. If *, disabled certificate validation.
	Timeout int         `json:"timeout,omitempty"`  // Optional. The timeout in seconds for the request.
	Url     string      `json:"url"`                // The URL to be requested
}

// HTTPPOSTResponse is the response of POST.
type HTTPPOSTResponse struct {
	Body    string      `json:"body"`     // HTTP response body, if Content-Type is text or application/json
	BodyB64 string      `json:"body_b64"` // base64 encoded HTTP response body, if body is binary data. Maximum accepted length is 16KB (16384 bytes)
	Code    int         `json:"code"`     // Code of the HTTP response
	Headers interface{} `json:"headers"`  // List of HTTP headers sent by the server
	Message string      `json:"message"`  // Msssage of the HTTP response
}

// readResponse reads the response into the given interface.
func (r *HTTPPOSTResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// POST This method performs an HTTP POST request
func (c HTTPClient) POST(args HTTPPOSTRequest) (resp *HTTPPOSTResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("HTTP.POST", args, &reader.Response); err != nil {
		return
	}

	resp = &HTTPPOSTResponse{}
	return resp, resp.readResponse(reader)
}

// Getbody returns the body value.
func (r *HTTPPOSTResponse) GetBody() string {
	return r.Body
}

// Getbody_b64 returns the body_b64 value.
func (r *HTTPPOSTResponse) GetBodyB64() string {
	return r.BodyB64
}

// Getcode returns the code value.
func (r *HTTPPOSTResponse) GetCode() int {
	return r.Code
}

// Getheaders returns the headers value.
func (r *HTTPPOSTResponse) GetHeaders() interface{} {
	return r.Headers
}

// Getmessage returns the message value.
func (r *HTTPPOSTResponse) GetMessage() string {
	return r.Message
}

/*
 > Command HTTP.Request
 > This method allows sending several HTTP methods through HTTP/HTTPS and receiving response. Currently supported are GET, POST, PUT, HEAD and DELETE.
*/

// HTTPRequestRequest is the request of Request.
type HTTPRequestRequest struct {
	Body    string      `json:"body,omitempty"`     // Optional. The request body. Disallowed for GET and HEAD and Required for POST and PUT.
	BodyB64 string      `json:"body_b64,omitempty"` // Optional. Base64 encoded binary request body. Either body or body_b64 is allowed.
	Headers interface{} `json:"headers"`            // User supplied headers for the request, keys are header names and values are header values. Optional. User-Agent and Content-Length headers are disallowed and will be replaced with default values if specified. Contnet-Type header defaults to application/json for body and application/octet-stream for body_b64 if not specified.
	Method  string      `json:"method"`             // The HTTP method to be used. One of: GET, POST, PUT, HEAD, DELETE
	SslCa   string      `json:"ssl_ca,omitempty"`   // Optional. Type of the TCP socket. One of: null, user_ca.pem or *. If null, default value, the built-in ca.pem TLS CA is used for HTTPS requests. If user_ca.pem, the user CA will be used. If *, disabled certificate validation.
	Timeout int         `json:"timeout,omitempty"`  // Optional. The timeout in seconds for the request.
	Url     string      `json:"url"`                // The URL to be requested
}

// HTTPRequestResponse is the response of Request.
type HTTPRequestResponse struct {
	Body    string      `json:"body"`     // HTTP response body, if Content-Type is text or application/json
	BodyB64 string      `json:"body_b64"` // base64 encoded HTTP response body, if body is binary data. Maximum accepted length is 16KB (16384 bytes)
	Code    int         `json:"code"`     // Code of the HTTP response
	Headers interface{} `json:"headers"`  // List of HTTP headers sent by the server
	Message string      `json:"message"`  // Msssage of the HTTP response
}

// readResponse reads the response into the given interface.
func (r *HTTPRequestResponse) readResponse(reader *responseReader) error { //nolint:dupl
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// Request This method allows sending several HTTP methods through HTTP/HTTPS and receiving response. Currently supported are GET, POST, PUT, HEAD and DELETE.
func (c HTTPClient) Request(args HTTPRequestRequest) (resp *HTTPRequestResponse, err error) { //nolint:dupl
	reader := NewResponseReader()

	if err = c.client.rpc.Call("HTTP.Request", args, &reader.Response); err != nil {
		return
	}

	resp = &HTTPRequestResponse{}
	return resp, resp.readResponse(reader)
}

// Getbody returns the body value.
func (r *HTTPRequestResponse) GetBody() string {
	return r.Body
}

// Getbody_b64 returns the body_b64 value.
func (r *HTTPRequestResponse) GetBodyB64() string {
	return r.BodyB64
}

// Getcode returns the code value.
func (r *HTTPRequestResponse) GetCode() int {
	return r.Code
}

// Getheaders returns the headers value.
func (r *HTTPRequestResponse) GetHeaders() interface{} {
	return r.Headers
}

// Getmessage returns the message value.
func (r *HTTPRequestResponse) GetMessage() string {
	return r.Message
}
