commands:
    - category: Shelly
      name: ListMethods
      description: This method lists all available RPC methods. It takes into account both ACL and authentication restrictions and only lists the methods allowed for the particular user/channel that's making the request.
      response:
        methods:
          type: map[string]string
          description: "Names of the methods allowed."
    - category: Shelly
      name: GetDeviceInfo
      description: This method returns information about the device.
      request:
        ident: 
          type: bool
          description: Flag specifying if extra identifying information should be displayed.
          omitempty: true
      response:
        id: 
          type: string
          description: "Id of the device."
        mac:
          type: string
          description: "MAC address of the device."
        model:
          type: string
          description: "Model of the device."
        gen:
          type: int
          description: "Generation of the device."
        fw_id:
          type: string
          description: "Id of the firmware of the device."
        ver:
          type: string
          description: "Version of the firmware of the device."
        app:
          type: string
          description: "Application name."
        profile:
          type: string
          description: "Name of the device profile (only applicable for multi-profile devices)."
        auth_en:
          type: bool
          description: "true if authentication is enabled, false otherwise."
        auth_domain:
          type: string
          description: "Name of the domain (null if authentication is not enabled)."
        discoverable:
          type: bool
          description: "true if the device is discoverable, false otherwise."
        key:
          type: string
          description: "Cloud key of the device (see note below), present only when the ident parameter is set to true"
        batch:
          type: string
          description: "Batch used to provision the device, present only when the ident parameter is set to true"
        fw_sbits:
          type: string
          description: "Shelly internal flags, present only when the ident parameter is set to true"
    # Switch
    ## Switch.SetConfig - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Switch#switchsetconfig
    - category: Switch  
      name: SetConfig
      request: 
        id:
          type: string
          description: Id of the Switch component instance.
        config:
          type: object
          description: Configuration that the method takes.
          omitempty: true
          items:
            id: 
              type: string
              description: Id of the Switch component instance.
            name:
              type: string
              description: Name of the switch instance.
              omitempty: true
            in_mode:
              type: string
              description: "Mode of the associated input. Range of values: momentary, follow, flip, detached"
            initial_state:
              type: string
              description: "Output state to set on power_on. Range of values: off, on, restore_last, match_input"
            auto_on:
              type: bool
              description: "True if the \"Automatic ON\" function is enabled, false otherwise"
            auto_on_delay:
              type: int
              description: "Seconds to pass until the component is switched back on"
            auto_off:
              type: bool
              description: "True if the \"Automatic OFF\" function is enabled, false otherwise"
            auto_off_delay:
              type: int
              description: "Seconds to pass until the component is switched back off"
            autorecover_voltage_errors:
              type: bool
              description: "True if switch output state should be restored after over/undervoltage error is cleared, false otherwise (shown if applicable)"
            input_id:
              type: int
              description: "Id of the Input component which controls the Switch. Applicable only to Pro1 and Pro1PM devices. Valid values: 0, 1"
            power_limit:
              type: int
              description: "Limit (in Watts) over which overpower condition occurs (shown if applicable)"
              omitempty: true
            voltage_limit:
              type: int
              description: "Limit (in Volts) over which overvoltage condition occurs (shown if applicable)"
              omitempty: true
            undervoltage_limit:
              type: int
              description: "Limit (in Volts) under which undervoltage condition occurs (shown if applicable)"
              omitempty: true
            current_limit:
              type: int
              description: "int, limit (in Amperes) over which overcurrent condition occurs (shown if applicable)"
              omitempty: true
    ## Switch.GetConfig - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Switch#switchgetconfig
    - category: Switch  
      name: GetConfig
      request: 
        id:
          type: string
          description: Id of the Switch component instance.
      response:
        id: 
          type: string
          description: Id of the Switch component instance.
        name:
          type: string
          description: Name of the switch instance.
          omitempty: true
        in_mode:
          type: string
          description: "Mode of the associated input. Range of values: momentary, follow, flip, detached"
        initial_state:
          type: string
          description: "Output state to set on power_on. Range of values: off, on, restore_last, match_input"
        auto_on:
          type: bool
          description: "True if the \"Automatic ON\" function is enabled, false otherwise"
        auto_on_delay:
          type: int
          description: "Seconds to pass until the component is switched back on"
        auto_off:
          type: bool
          description: "True if the \"Automatic OFF\" function is enabled, false otherwise"
        auto_off_delay:
          type: int
          description: "Seconds to pass until the component is switched back off"
        autorecover_voltage_errors:
          type: bool
          description: "True if switch output state should be restored after over/undervoltage error is cleared, false otherwise (shown if applicable)"
        input_id:
          type: int
          description: "Id of the Input component which controls the Switch. Applicable only to Pro1 and Pro1PM devices. Valid values: 0, 1"
        power_limit:
          type: int
          description: "Limit (in Watts) over which overpower condition occurs (shown if applicable)"
          omitempty: true
        voltage_limit:
          type: int
          description: "Limit (in Volts) over which overvoltage condition occurs (shown if applicable)"
          omitempty: true
        undervoltage_limit:
          type: int
          description: "Limit (in Volts) under which undervoltage condition occurs (shown if applicable)"
          omitempty: true
        current_limit:
          type: int
          description: "int, limit (in Amperes) over which overcurrent condition occurs (shown if applicable)"
          omitempty: true
    ## Switch.GetStatus - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Switch#switchgetstatus
    - category: Switch  
      name: GetStatus
      request: 
        id:
          type: string
          description: Id of the Switch component instance.
      response:
        id: 
          type: string
          description: Id of the Switch component instance.
        source:
          type: string
          description: "Source of the last command, for example: init, WS_in, http, ..."
        output:
          type: bool
          description: "true if the output channel is currently on, false otherwise"
        timer_started_at:
          type: int
          description: "Unix timestamp, start time of the timer (in UTC) (shown if the timer is triggered)"
          omitempty: true
        timer_duration:
          type: int
          description: "Duration of the timer in seconds (shown if the timer is triggered)"
          omitempty: true
        apower:
          type: int
          description: "Last measured instantaneous active power (in Watts) delivered to the attached load (shown if applicable)"
          omitempty: true
        voltage:
          type: int
          description: "Last measured voltage in Volts (shown if applicable)"
          omitempty: true
        current:
          type: int
          description: "Last measured current in Amperes (shown if applicable)"
          omitempty: true
        pf:
          type: int
          description: "Last measured power factor (shown if applicable)"
          omitempty: true
        aenergy:
          type: object
          description: Information about the active energy counter (shown if applicable)
          omitempty: true
          items:
            total:
              type: int
              description: Total energy consumed in Watt-hours
            by_minute:
              type: "[]int"
              description: Energy consumption by minute (in Milliwatt-hours) for the last three minutes (the lower the index of the element in the array, the closer to the current moment the minute)
            minute_ts:
              type: int
              description: Unix timestamp of the first second of the last minute (in UTC)
        temperature:
          type: object
          description: Information about the temperature
          items:
            tC:
              type: int
              description: Temperature in Celsius (null if temperature is out of the measurement range)
            tF:
              type: int
              description: Temperature in Fahrenheit (null if temperature is out of the measurement range)
        errors:
          type: "[]string"
          description: "Error conditions occurred. May contain overtemp, overpower, overvoltage, undervoltage, (shown if at least one error is present)"
          omitempty: true
    # Switch.Toggle - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Switch#switchtoggle
    - category: Switch  
      name: Toggle
      request: 
        id:
          type: int
          description: Id of the Switch component instance.
      response:
        was_on: 
          type: bool
          description: True if the switch was on before the method was executed, false otherwise.
    # Switch.Set - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Switch#switchset
    - category: Switch
      name: Set
      description: This method sets the output of the Switch component to on or off.
      request:
        id:
          type: string
          description: Id of the Switch component instance.
        on:
          type: bool
          description: True for switch on, false otherwise.
        toggle_after:
          type: int
          description: "int, seconds to wait before toggling the switch back to its previous state."
          omitempty: true
      response:
        was_on:
          type: bool
          description: True if the switch was on before the method was executed, false otherwise.
    #
    # > End of Switch
    #

    #
    # > Start of Light
    #
    ## Light.GetConfig - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Light#lightgetconfig
    - category: Light  
      name: GetConfig
      request: 
        id:
          type: string
          description: Id of the Light component instance.
      response:
        id: 
          type: string
          description: Id of the Light component instance.
        name:
          type: string
          description: Name of the light instance.
          omitempty: true
        initial_state:
          type: string
          description: "Output state to set on power_on. Range of values: off, on, restore_last"
        auto_on:
          type: bool
          description: "True if the \"Automatic ON\" function is enabled, false otherwise"
        auto_on_delay:
          type: int
          description: "Seconds to pass until the component is switched back on"
        auto_off:
          type: bool
          description: "True if the \"Automatic OFF\" function is enabled, false otherwise"
        auto_off_delay:
          type: int
          description: "Seconds to pass until the component is switched back off"
        default.brightness:
          type: int
          description: "Brightness level (in percent) after power on"
          omitempty: true
        night_mode.enable:
          type: bool
          description: "Enable or disable night mode"
        night_mode.brightness:
          type: int
          description: "Brightness level limit when night mode is active"
        night_mode.active_between:
          type: "[]string"
          description: "Containing 2 elements of type string, the first element indicates the start of the period during which the night mode will be active, the second indicates the end of that period. Both start and end are strings in the format HH:MM, where HH and MM are hours and minutes with optinal leading zeros."
    ## Light.GetStatus - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Light#lightgetstatus  
    - category: Light  
      name: GetStatus
      request: 
        id:
          type: string
          description: Id of the Light component instance.
      response:
        id: 
          type: string
          description: Id of the Light component instance.
        source:
          type: string
          description: "Source of the last command, for example: init, WS_in, http, ..."
        output:
          type: bool
          description: "true if the output channel is currently on, false otherwise"
        brightness:
          type: int
          description: "Brightness level (in percent)"
        timer_started_at:
          type: int
          description: "Unix timestamp, start time of the timer (in UTC) (shown if the timer is triggered)"
          omitempty: true
        timer_duration:
          type: int
          description: "Duration of the timer in seconds (shown if the timer is triggered)"
          omitempty: true
    # Light.SetConfig - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Light#lightsetconfig
    - category: Light
      name: SetConfig
      description: This method sets the configuration of the Light component.
      request:
        id:
          type: string
          description: Id of the Light component instance.
        config:
          type: object
          description: Configuration that the method takes.
          omitempty: true
          items: 
            id: 
              type: string
              description: Id of the Light component instance.
            name:
              type: string
              description: Name of the light instance.
              omitempty: true
            initial_state:
              type: string
              description: "Output state to set on power_on. Range of values: off, on, restore_last"
            auto_on:
              type: bool
              description: "True if the \"Automatic ON\" function is enabled, false otherwise"
            auto_on_delay:
              type: int
              description: "Seconds to pass until the component is switched back on"
            auto_off:
              type: bool
              description: "True if the \"Automatic OFF\" function is enabled, false otherwise"
            auto_off_delay:
              type: int
              description: "Seconds to pass until the component is switched back off"
            default.brightness:
              type: int
              description: "Brightness level (in percent) after power on"
              omitempty: true
            night_mode.enable:
              type: bool
              description: "Enable or disable night mode"
            night_mode.brightness:
              type: int
              description: "Brightness level limit when night mode is active"
            night_mode.active_between:
              type: "[]string"
              description: "Containing 2 elements of type string, the first element indicates the start of the period during which the night mode will be active, the second indicates the end of that period. Both start and end are strings in the format HH:MM, where HH and MM are hours and minutes with optinal leading zeros."
    ## Light.Set - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Light#lightset
    - category: Light
      name: Set
      description: This method sets the output of the Light component to on or off. At least one of the on and brightness parameters is required.
      request:
        id:
          type: string
          description: Id of the Light component instance.
        on:
          type: bool
          description: True for light on, false otherwise.
          omitempty: true
        brightness:
          type: int
          description: "Brightness level (in percent)"
          omitempty: true
        toggle_after:
          type: int
          description: "Optional flip-back timer in seconds."
          omitempty: true
    ## Light.Toggle - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Light#lighttoggle
    - category: Light
      name: Toggle
      description: This method toggles the output of the Light component.
      request:
        id:
          type: string
          description: Id of the Light component instance.
    #
    # > End of Light
    #
    #
    # > Start of Cover
    #
    ## Cover.GetConfig - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Cover#covergetconfig
    - category: Cover  
      name: GetConfig
      request: 
        id:
          type: string
          description: Id of the Cover component instance.
      response:
        id: 
          type: string
          description: Id of the Cover component instance.
        name:
          type: string
          description: Name of the cover instance.
          omitempty: true
        in_mode:
          type: string
          description: "One of single, dual or detached, only present if there is at least one input associated with the Cover instance. Single - Cover operation in both open and close directions is controlled via a single input. In this mode, only input_0 is used to open/close/stop the Cover. It doesn't matter if input_0 has in_type=switch or in_type=button, the behavior is the same: each switch toggle or button press cycles between open/stop/close/stop/... In single mode, input_1 is free to be used as a safety switch (e.g. end-of-motion limit switch, emergency-stop, etc.). dual - Cover operation is controlled via two inputs, one for open and one for close. In this mode, input_0 is used to open the Cover, input_1 is used to close the Cover.The exact behavior depends on the in_type of the inputs: if in_type = switch: toggle the switch to ON to move in the associated direction; toggle the switch to OFF to stop, if in_type = button: press the button to move in the associated direction; press the button again to stop. detached - Cover operation via the input/inputs is prohibited."
          omitempty: true
        initial_state:
          type: string
          description: "Defines Cover target state on power-on, one of open (Cover will fully open), closed (Cover will fully close) or stopped (Cover will not change its position)."
        power_limit:
          type: int
          description: "Watts, limit that must be exceeded to trigger an overpower error."
        voltage_limit:
          type: int
          description: "Volts, limit that must be exceeded to trigger an undervoltage error."
        undervoltage_limit:
          type: int
          description: "Volts, limit that must be exceeded to trigger an undervoltage error."
        current_limit:
          type: int
          description: "Amperes, limit that must be exceeded to trigger an overcurrent error."
        motor:
          type: object
          description: "configuration of the Cover motor. The exact contents depend on the type of motor used. The descriptions below are valid when an AC motor is used."
          items:
            idle_power_thr:
              type: int
              description: "Watts, threshold below which the motor is considered stopped."
            idle_confirm_period:
              type: int
              description: "Seconds, minimum period of time in idle state before state is confirmed."
        maxtime_open:
          type: int
          description: "Default timeout after which Cover will stop moving in open direction."
        maxtime_close:
          type: int
          description: "Default timeout after which Cover will stop moving in close direction."
        swap_inputs:
          type: bool
          description: "Only present if there are two inputs associated with the Cover instance, defines whether the functions of the two inputs are swapped. The effect of swap_inputs is observable only when in_mode != detached. When swap_inputs is false: If in_mode = dual: input_0 is used to open, input_1 is used to close. If in_mode = single: input_0 is used to open/close/stop, input_1 is used as safety switch or is not used at all. When swap_inputs is true: If in_mode = dual: input_0 is used to close, input_1 is used to open. If in_mode = single: input_0 is used as safety switch or is not used at all, input_1 is used to open/close/stop."
        invert_directions:
          type: bool
          description: "Defines the motor rotation for open and close directions (changing this parameter requires a reboot). false - On open motor rotates clockwise, on close motor rotates counter-clockwise. true - On open motor rotates counter-clockwise, on close motor rotates clockwise."
        obstruction_detection:
          type: object
          description: "Defines the behavior of the obstruction detection safety feature."
          items:
            enable:
              type: bool
              description: "true when obstruction detection is enabled, false otherwise"
            direction:
              type: string
              description: "The direction of motion for which safety switch should be monitored, one of open, close, both"
            action:
              type: string
              description: "The recovery action which should be performed if the safety switch is engaged while moving in a monitored direction, one of: stop - Immediately stop Cover. reverse - Immediately stop Cover, then move in the opposite direction until a fully open or fully closed position is reached."
              omitempty: true
            power_thr:
              type: int
              description: "Watts, power consumption above this threshold should be interpreted as objects obstructing Cover movement. This property is editable at any time, but note that during the cover calibration procedure (Cover.Calibrate), power_thr will be automatically set to the peak power consumption + 15%, overwriting the current value. The automatic setup of power_thr during calibration will only start tracking power values when the holdoff time (see below) has elapsed."
            holdoff:
              type: int
              description: "Seconds, time to wait after Cover starts moving before obstruction detection is activated (to avoid false detections because of the initial power consumption spike)."
        safety_switch:
          type: object
          description: Defines the behavior of the safety switch feature, only present if there are two inputs associated with the Cover instance. The safety_switch feature will only work when in_mode=single
          items:
            enable:
              type: bool
              description: "true when safety switch is enabled, false otherwise"
            direction:
              type: string
              description: "The direction of motion for which safety switch should be monitored, one of open, close, both"
            action:
              type: string
              description: "The recovery action which should be performed if the safety switch is engaged while moving in a monitored direction, one of: stop - Immediately stop Cover. reverse - Immediately stop Cover, then move in the opposite direction until a fully open or fully closed position is reached. pause - Immediately stop Cover, then either: wait for a command to move in an allowed direction (see below) or automatically continue movement in the same direction (i.e. the one that was interrupted) when the safety switch is disengaged"
              omitempty: true
            allowed_move:
              type: string
              description: "Allowed movement direction when the safety switch is engaged while moving in a monitored direction: null - null means Cover can't be moved in neither open nor close directions while the safety switch is engaged. reverse - the only other option is reverse, which means Cover can only be moved in the direction opposite to the one that was interrupted (for example, if the safety switch was hit while opening, Cover can only be commanded to close if the switch is not disengaged)"
              omitempty: true
    ## Cover.SetConfig - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Cover#coversetconfig
    - category: Cover  
      name: SetConfig
      request:
        id:
          type: string
          description: "The ID of the Cover instance to configure."
        config:
          type: object
          description: "The configuration to apply to the Cover instance."
          items:
            id: 
              type: string
              description: Id of the Cover component instance.
            name:
              type: string
              description: Name of the cover instance.
              omitempty: true
            in_mode:
              type: string
              description: "One of single, dual or detached, only present if there is at least one input associated with the Cover instance. Single - Cover operation in both open and close directions is controlled via a single input. In this mode, only input_0 is used to open/close/stop the Cover. It doesn't matter if input_0 has in_type=switch or in_type=button, the behavior is the same: each switch toggle or button press cycles between open/stop/close/stop/... In single mode, input_1 is free to be used as a safety switch (e.g. end-of-motion limit switch, emergency-stop, etc.). dual - Cover operation is controlled via two inputs, one for open and one for close. In this mode, input_0 is used to open the Cover, input_1 is used to close the Cover.The exact behavior depends on the in_type of the inputs: if in_type = switch: toggle the switch to ON to move in the associated direction; toggle the switch to OFF to stop, if in_type = button: press the button to move in the associated direction; press the button again to stop. detached - Cover operation via the input/inputs is prohibited."
              omitempty: true
            initial_state:
              type: string
              description: "Defines Cover target state on power-on, one of open (Cover will fully open), closed (Cover will fully close) or stopped (Cover will not change its position)."
            power_limit:
              type: int
              description: "Watts, limit that must be exceeded to trigger an overpower error."
            voltage_limit:
              type: int
              description: "Volts, limit that must be exceeded to trigger an undervoltage error."
            undervoltage_limit:
              type: int
              description: "Volts, limit that must be exceeded to trigger an undervoltage error."
            current_limit:
              type: int
              description: "Amperes, limit that must be exceeded to trigger an overcurrent error."
            motor:
              type: object
              description: "configuration of the Cover motor. The exact contents depend on the type of motor used. The descriptions below are valid when an AC motor is used."
              items:
                idle_power_thr:
                  type: int
                  description: "Watts, threshold below which the motor is considered stopped."
                idle_confirm_period:
                  type: int
                  description: "Seconds, minimum period of time in idle state before state is confirmed."
            maxtime_open:
              type: int
              description: "Default timeout after which Cover will stop moving in open direction."
            maxtime_close:
              type: int
              description: "Default timeout after which Cover will stop moving in close direction."
            swap_inputs:
              type: bool
              description: "Only present if there are two inputs associated with the Cover instance, defines whether the functions of the two inputs are swapped. The effect of swap_inputs is observable only when in_mode != detached. When swap_inputs is false: If in_mode = dual: input_0 is used to open, input_1 is used to close. If in_mode = single: input_0 is used to open/close/stop, input_1 is used as safety switch or is not used at all. When swap_inputs is true: If in_mode = dual: input_0 is used to close, input_1 is used to open. If in_mode = single: input_0 is used as safety switch or is not used at all, input_1 is used to open/close/stop."
            invert_directions:
              type: bool
              description: "Defines the motor rotation for open and close directions (changing this parameter requires a reboot). false - On open motor rotates clockwise, on close motor rotates counter-clockwise. true - On open motor rotates counter-clockwise, on close motor rotates clockwise."
            obstruction_detection:
              type: object
              description: "Defines the behavior of the obstruction detection safety feature."
              items:
                enable:
                  type: bool
                  description: "true when obstruction detection is enabled, false otherwise"
                direction:
                  type: string
                  description: "The direction of motion for which safety switch should be monitored, one of open, close, both"
                action:
                  type: string
                  description: "The recovery action which should be performed if the safety switch is engaged while moving in a monitored direction, one of: stop - Immediately stop Cover. reverse - Immediately stop Cover, then move in the opposite direction until a fully open or fully closed position is reached."
                  omitempty: true
                power_thr:
                  type: int
                  description: "Watts, power consumption above this threshold should be interpreted as objects obstructing Cover movement. This property is editable at any time, but note that during the cover calibration procedure (Cover.Calibrate), power_thr will be automatically set to the peak power consumption + 15%, overwriting the current value. The automatic setup of power_thr during calibration will only start tracking power values when the holdoff time (see below) has elapsed."
                holdoff:
                  type: int
                  description: "Seconds, time to wait after Cover starts moving before obstruction detection is activated (to avoid false detections because of the initial power consumption spike)."
            safety_switch:
              type: object
              description: Defines the behavior of the safety switch feature, only present if there are two inputs associated with the Cover instance. The safety_switch feature will only work when in_mode=single
              items:
                enable:
                  type: bool
                  description: "true when safety switch is enabled, false otherwise"
                direction:
                  type: string
                  description: "The direction of motion for which safety switch should be monitored, one of open, close, both"
                action:
                  type: string
                  description: "The recovery action which should be performed if the safety switch is engaged while moving in a monitored direction, one of: stop - Immediately stop Cover. reverse - Immediately stop Cover, then move in the opposite direction until a fully open or fully closed position is reached. pause - Immediately stop Cover, then either: wait for a command to move in an allowed direction (see below) or automatically continue movement in the same direction (i.e. the one that was interrupted) when the safety switch is disengaged"
                  omitempty: true
                allowed_move:
                  type: string
                  description: "Allowed movement direction when the safety switch is engaged while moving in a monitored direction: null - null means Cover can't be moved in neither open nor close directions while the safety switch is engaged. reverse - the only other option is reverse, which means Cover can only be moved in the direction opposite to the one that was interrupted (for example, if the safety switch was hit while opening, Cover can only be commanded to close if the switch is not disengaged)"
                  omitempty: true
    ## Cover.GetStatus - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Cover#covergetstatus
    - category: Cover
      name: GetStatus
      description: Get Cover status
      request: 
        id:
          type: string
          description: "The numeric ID of the Cover component instance"
      response:
        id:
          type: int
          description: "The numeric ID of the Cover component instance"
        source:
          type: string
          description: "Source of the last command"
        state:
          type: string
          description: "One of open (Cover is fully open), closed (Cover is fully closed), opening (Cover is actively opening), closing (Cover is actively closing), stopped (Cover is not moving, and is neither fully open nor fully closed, or the open/close state is unknown), calibrating (Cover is performing a calibration procedure)"
        apower:
          type: int
          description: "Active power in Watts"
        voltage:
          type: int
          description: "Voltage in Volts"
        current:
          type: int
          description: "Current in Amperes"
        pf:
          type: int
          description: "Power factor"
        aenergy:
          type: object
          description: Information about the active energy counter (shown if applicable)
          omitempty: true
          items:
            total:
              type: int
              description: Total energy consumed in Watt-hours
            by_minute:
              type: "[]int"
              description: Energy consumption by minute (in Milliwatt-hours) for the last three minutes (the lower the index of the element in the array, the closer to the current moment the minute)
            minute_ts:
              type: int
              description: Unix timestamp of the first second of the last minute (in UTC)
        current_pos:
          type: int
          description: "Only present if Cover is calibrated. Represents current position in percent from 0 (fully closed) to 100 (fully open); null if position is unknown"
        target_pos:
          type: int
          description: "Only present if Cover is calibrated and is actively moving to a requested position in either open or close directions. Represents the target position in percent from 0 (fully closed) to 100 (fully open); null if target position has been reached or the movement was cancelled"
        move_timeout:
          type: int
          description: "Seconds, only present if Cover is actively moving in either open or close directions. Cover will automatically stop after the timeout expires"
        move_started_at:
          type: int
          description: "Only present if Cover is actively moving in either open or close directions. Represents the time at which the movement has begun"
        pos_control:
          type: bool
          description: "False if Cover is not calibrated and only discrete open/close is possible; true if Cover is calibrated and can be commanded to go to arbitrary positions between fully open and fully closed"
        temperature:
          type: object
          description: Temperature sensor information, only present if a temperature monitor is associated with the Cover instance
          items:
            tC:
              type: int
              description: Temperature in Celsius (null if temperature is out of the measurement range)
            tF:
              type: int
              description: Temperature in Fahrenheit (null if temperature is out of the measurement range)
        errors:
          type: "[]string"
          description: Only present if an error condition has occurred
    ## Cover.Open - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Cover#open
    - category: Cover
      name: Open
      description: Open Cover
      request:
        id:
          type: string
          description: "The numeric ID of the Cover component instance"
        duration:
          type: int
          description: "If duration is not provided, Cover will fully open, unless it times out because of maxtime_open first. If duration (seconds) is provided, Cover will move in open direction for the specified time. duration must be in range [0.1..maxtime_open]"
          omitempty: true
    ## Cover.Close - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Cover#close
    - category: Cover
      name: Close
      description: Close Cover
      request:
        id:
          type: string
          description: "The numeric ID of the Cover component instance"
    ## Cover.GoToPosition - https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Cover#gotoposition
    - category: Cover
      name: GoToPosition
      description: Go to position
      request:
        id:
          type: string
          description: "The numeric ID of the Cover component instance"
        pos:
          type: int
          description: "Required and mutually exclusive (at least one of them pos/rel be provided, but not both at the same time). pos represents target position in %, allowed range [0..100]. If rel is provided, Cover will move to a target_position = current_position + rel. If the value of rel is so big that it results in overshoot (i.e. target_position is beyond fully open / fully closed), target_position will be silently capped to fully open / fully closed"
        rel:
          type: int
          description: "Required and mutually exclusive (at least one of them pos/rel be provided, but not both at the same time). rel represents relative move in %, allowed range [-100..100]"