// code generated by go generate - look at command.go.tmpl for source file
package shelly

{{ range . }}

{{ $category := .Category }}
{{ $name := .Name }}

/*
 > Command {{ .Category }}.{{ .Name }}
 > {{ .Description }}
*/

// {{ .Category }}{{ .Name }}Request is the request of {{ .Name }}.
type {{ .Category }}{{ .Name }}Request struct {
	{{- range $k, $v := .Request }}
			{{ if $v.Description }} // {{ template "optional" $v.OmitEmpty }}{{ $v.Description }}{{ end }}
			{{ $k | ToCamel }}{{template "space"}}
			{{- if or (eq $v.Type "object") (eq $v.Type "[]object") }}
				{{- if eq $v.Type "[]object" }}[]{{end}}{{ $v.StructName }} `json:"{{ $k | ToLower }}{{ if $v.OmitEmpty }},omitempty{{ end }}"`
			{{- else }}
				{{- $v.Type }} `json:"{{ $k | ToLower }}"`
			{{- end }}
	{{- end }}
}

{{ if .ExtraStructsRequest }}
	{{ range $k, $v := .ExtraStructsRequest }}
		// Extra {{ $v.StructName }} is the request of {{ $k }}.
		type {{ $v.StructName }} struct {
			{{- range $k1, $v1 := $v.Items }}
				{{ if $v1.Description }} // {{ template "optional" $v1.OmitEmpty }}{{ $v1.Description }}{{ end }}
				{{ $k1 | ToCamel }}{{template "space"}}
				{{- if or (eq $v1.Type "object") (eq $v1.Type "[]object") }}
					{{- if eq $v.Type "[]object" }}[]{{end}}{{ $v1.StructName }} `json:"{{ $k1 | ToLower }}{{ if $v1.OmitEmpty }},omitempty{{ end }}"`
				{{- else }}
					{{- $v1.Type }} `json:"{{ $k1 | ToLower }}"`
				{{- end }}
			{{- end }}
		}
	{{ end }}
{{ end }}


// {{ .Category }}{{ .Name }}Response is the response of {{ .Name }}.
type {{ .Category }}{{ .Name }}Response struct {
    {{- range $k, $v := .Response }}
		{{ if $v.Description }} // {{ template "optional" $v.OmitEmpty }}{{ $v.Description }}{{ end }}
		{{ $k | ToCamel }}{{template "space"}}
		{{- if or (eq $v.Type "object") (eq $v.Type "[]object") }}
			{{- if eq $v.Type "[]object" }}[]{{end}}{{ $v.StructName }} `json:"{{ $k | ToLower }}{{ if $v.OmitEmpty }},omitempty{{ end }}"`
		{{- else }}
			{{- $v.Type }} `json:"{{ $k | ToLower }}"`
		{{- end }}
	{{- end }}
}

{{ if .ExtraStructsResponse }}
	{{ range $k, $v := .ExtraStructsResponse }}
		// {{ $v.StructName }} is the response of {{ $k }}.
		type {{ $v.StructName }} struct {
			{{- range $k1, $v1 := $v.Items }}
					{{ if $v1.Description }} // {{ template "optional" $v1.OmitEmpty }}{{ $v1.Description }}{{ end }}
					{{ $k1 | ToCamel }}{{template "space"}}
					{{- if or (eq $v1.Type "object") (eq $v1.Type "[]object") }}
						{{- if eq $v.Type "[]object" }}[]{{end}}{{ $v1.StructName }} `json:"{{ $k1 | ToLower }}{{ if $v1.OmitEmpty }},omitempty{{ end }}"`
					{{- else }}
						{{- $v1.Type }} `json:"{{ $k1 | ToLower }}"`
					{{- end }}
			{{- end }}
		}
	{{ end }}
{{ end }}

// readResponse reads the response into the given interface.
func (r *{{ .Category }}{{ .Name }}Response) readResponse(reader *responseReader) error {
	if reader.Response == nil {
		return ErrInvalidResponse
	}
	return reader.Read(r)
}

// {{ .Name }} {{ .Description }}
func (c {{ .Category }}Client) {{ .Name }}(args {{ .Category }}{{ .Name }}Request) (resp *{{ .Category }}{{ .Name }}Response, err error) {
	reader := NewResponseReader()

	if err = c.client.rpc.Call("{{ .Category }}.{{ .Name }}", args, &reader.Response); err != nil {
		return
	}

	resp = &{{ .Category }}{{ .Name }}Response{}
	return resp, resp.readResponse(reader)
}

{{ range $k , $v := .Response }}
	// Get{{ $k }} returns the {{ $k }} value.
	func (r *{{ $category }}{{ $name }}Response) Get{{ $v.CamelName }}() {{ if or (eq $v.Type "object") (eq $v.Type "[]object") }}{{ if eq $v.Type "[]object" }}[]{{end}}{{ $v.StructName }}{{else}}{{ $v.Type }}{{end}} {
		return r.{{ $v.CamelName }}
	}
{{ end }}

{{ if .ExtraStructsResponse }}
	{{ range $k, $v := .ExtraStructsResponse }}
		{{ range $k1 , $v1 := $v.Items }}
			// Get{{ $v1.CamelName }} returns the {{ $k1 }} value.
			func (r *{{ $v.StructName }}) Get{{ $v1.CamelName }}()  {{ if or (eq $v1.Type "object") (eq $v1.Type "[]object") }}{{ if eq $v1.Type "[]object" }}[]{{end}}{{ $v1.StructName }}{{else}}{{ $v1.Type }}{{end}} {
				return r.{{ $v1.CamelName }}
			}
		{{ end }}
	{{ end }}
{{ end }}

{{ end }}

{{ define "optional" }}
{{- if .}}Optional. {{ end -}} 
{{ end }}

{{ define "space" }} {{end}}
